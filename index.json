{
  "api/Lachee.Utilities.AutoAttribute.html": {
    "href": "api/Lachee.Utilities.AutoAttribute.html",
    "title": "Class AutoAttribute | Utilities",
    "keywords": "Class AutoAttribute Automatically fetches attached components Inheritance Object AutoAttribute Namespace : Lachee.Utilities Assembly : cs.temp.dll.dll Syntax [AttributeUsage(AttributeTargets.Field, AllowMultiple = false)] public class AutoAttribute : PropertyAttribute Properties Hidden Hides the field from the inspector if the value is set. Declaration public bool Hidden { get; set; } Property Value Type Description Boolean IncludeChildren Search the tree for children with the same game object. If this attribute is on an array, it will populate the values from only children If this attribute is not on an array, it will only check if the component cannot be found on the parent. Declaration public bool IncludeChildren { get; set; } Property Value Type Description Boolean IncludeChildrenWithTag Tag the children objects must have to be included. Leave blank or null for any tag. Declaration public string IncludeChildrenWithTag { get; set; } Property Value Type Description String"
  },
  "api/Lachee.Utilities.Circle.html": {
    "href": "api/Lachee.Utilities.Circle.html",
    "title": "Class Circle | Utilities",
    "keywords": "Class Circle Inheritance Object Circle Namespace : Lachee.Utilities Assembly : cs.temp.dll.dll Syntax public class Circle : MonoBehaviour Properties lineRenderer Declaration public LineRenderer lineRenderer { get; } Property Value Type Description LineRenderer mode Declaration public Circle.Mode mode { get; set; } Property Value Type Description Circle.Mode offset Declaration public Vector3 offset { get; set; } Property Value Type Description Vector3 points Declaration public int points { get; set; } Property Value Type Description Int32 radius Declaration public float radius { get; set; } Property Value Type Description Single Methods UpdatePoints() Declaration public void UpdatePoints()"
  },
  "api/Lachee.Utilities.Circle.Mode.html": {
    "href": "api/Lachee.Utilities.Circle.Mode.html",
    "title": "Enum Circle.Mode | Utilities",
    "keywords": "Enum Circle.Mode Namespace : Lachee.Utilities Assembly : cs.temp.dll.dll Syntax public enum Mode Fields Name Description XY XZ ZY"
  },
  "api/Lachee.Utilities.Editor.AutoAttributeDrawer.html": {
    "href": "api/Lachee.Utilities.Editor.AutoAttributeDrawer.html",
    "title": "Class AutoAttributeDrawer | Utilities",
    "keywords": "Class AutoAttributeDrawer Inheritance Object AutoAttributeDrawer Namespace : Lachee.Utilities.Editor Assembly : cs.temp.dll.dll Syntax public class AutoAttributeDrawer : PropertyDrawer Methods ApplyToSerialziedProperty(SerializedProperty, AutoAttribute) Searches and applies components for the serialized proeprty Declaration public static bool ApplyToSerialziedProperty(SerializedProperty property, AutoAttribute attribute) Parameters Type Name Description SerializedProperty property AutoAttribute attribute Returns Type Description Boolean FindComponent(SerializedProperty, AutoAttribute) Declaration public static dynamic FindComponent(SerializedProperty property, AutoAttribute options) Parameters Type Name Description SerializedProperty property AutoAttribute options Returns Type Description Object GetPropertyHeight(SerializedProperty, GUIContent) Declaration public override float GetPropertyHeight(SerializedProperty property, GUIContent label) Parameters Type Name Description SerializedProperty property GUIContent label Returns Type Description Single OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label"
  },
  "api/Lachee.Utilities.Editor.AutoAttributeObserver.html": {
    "href": "api/Lachee.Utilities.Editor.AutoAttributeObserver.html",
    "title": "Class AutoAttributeObserver | Utilities",
    "keywords": "Class AutoAttributeObserver Observes the Auto-Attribute to rebuild lists. Inheritance Object AutoAttributeObserver Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Lachee.Utilities.Editor Assembly : cs.temp.dll.dll Syntax public static class AutoAttributeObserver"
  },
  "api/Lachee.Utilities.Editor.html": {
    "href": "api/Lachee.Utilities.Editor.html",
    "title": "Namespace Lachee.Utilities.Editor | Utilities",
    "keywords": "Namespace Lachee.Utilities.Editor Classes AutoAttributeDrawer AutoAttributeObserver Observes the Auto-Attribute to rebuild lists."
  },
  "api/Lachee.Utilities.GameObjectExtension.html": {
    "href": "api/Lachee.Utilities.GameObjectExtension.html",
    "title": "Class GameObjectExtension | Utilities",
    "keywords": "Class GameObjectExtension Extends GameObject functionality with a collection of utlities Inheritance Object GameObjectExtension Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Lachee.Utilities Assembly : cs.temp.dll.dll Syntax public static class GameObjectExtension Methods SetLayer(GameObject, Int32, LayerMask) Sets the layer of the game object Declaration public static bool SetLayer(this GameObject obj, int layer, LayerMask mask = null) Parameters Type Name Description GameObject obj The game object Int32 layer The new layer LayerMask mask Ignores the object if it doesn't match the mask Returns Type Description Boolean True if it matches and was updated SetLayerRecursive(GameObject, Int32, LayerMask, Boolean) Sets the layer of the game object and its children Declaration public static void SetLayerRecursive(this GameObject obj, int layer, LayerMask mask = null, bool exitEarly = false) Parameters Type Name Description GameObject obj The game object Int32 layer The new layer LayerMask mask Ignores the object if it doesn't match the mask Boolean exitEarly Stops recursion if the object doesn't match the mask"
  },
  "api/Lachee.Utilities.Gizmol.html": {
    "href": "api/Lachee.Utilities.Gizmol.html",
    "title": "Class Gizmol | Utilities",
    "keywords": "Class Gizmol Lachee's Gizmos Inheritance Object Gizmol Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Lachee.Utilities Assembly : cs.temp.dll.dll Syntax public static class Gizmol Methods DrawExclamation(Vector3, Single) Declaration public static void DrawExclamation(Vector3 position, float scale = 1F) Parameters Type Name Description Vector3 position Single scale Label(Vector3, String) Draws a Gizmos text at the given position Declaration public static void Label(Vector3 position, string text) Parameters Type Name Description Vector3 position String text Label(Vector3, String, Object[]) Declaration public static void Label(Vector3 position, string format, params object[] objects) Parameters Type Name Description Vector3 position String format Object [] objects"
  },
  "api/Lachee.Utilities.GLUtils.html": {
    "href": "api/Lachee.Utilities.GLUtils.html",
    "title": "Class GLUtils | Utilities",
    "keywords": "Class GLUtils Collection of tools to draw GL lines directly in the scene view Inheritance Object GLUtils Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Lachee.Utilities Assembly : cs.temp.dll.dll Syntax public static class GLUtils Fields transform Declaration public static Transform transform Field Value Type Description Transform Methods DrawBox(Color, Vector3, Vector2) Draws a box on the XY axis Declaration public static void DrawBox(Color color, Vector3 center, Vector2 size) Parameters Type Name Description Color color Vector3 center Vector2 size DrawBox(Material, Color, Vector3, Vector2) Draws a box on the XY axis Declaration public static void DrawBox(Material material, Color color, Vector3 center, Vector2 size) Parameters Type Name Description Material material Color color Vector3 center Vector2 size DrawCircle(Color, Vector3, Single, Int32) Draws a circle on the XY axis Declaration public static void DrawCircle(Color color, Vector3 center, float radius, int points = 16) Parameters Type Name Description Color color Vector3 center Single radius Int32 points DrawCircle(Material, Color, Vector3, Single, Int32) Draws a circle on the XY Axis Declaration public static void DrawCircle(Material material, Color color, Vector3 center, float radius, int points) Parameters Type Name Description Material material Color color Vector3 center Single radius Int32 points DrawLines(Color, Vector3[]) Declaration public static void DrawLines(Color color, params Vector3[] points) Parameters Type Name Description Color color Vector3 [] points DrawLines(Material, Color, Vector3[]) Declaration public static void DrawLines(Material material, Color color, params Vector3[] points) Parameters Type Name Description Material material Color color Vector3 [] points DrawTest(Transform, Color) Declaration public static void DrawTest(Transform root, Color color) Parameters Type Name Description Transform root Color color DrawTest(Transform, Material, Color) Declaration public static void DrawTest(Transform root, Material material, Color color) Parameters Type Name Description Transform root Material material Color color"
  },
  "api/Lachee.Utilities.html": {
    "href": "api/Lachee.Utilities.html",
    "title": "Namespace Lachee.Utilities | Utilities",
    "keywords": "Namespace Lachee.Utilities Classes AutoAttribute Automatically fetches attached components Circle GameObjectExtension Extends GameObject functionality with a collection of utlities Gizmol Lachee's Gizmos GLUtils Collection of tools to draw GL lines directly in the scene view Instantiator<T> Lazy<T> Lazy fetching of components. The component will not be fetched wtih GetComponent until .Value is called for the first time. Linql LINQ for Lachee's. Provides a collection of LINQ and Enumeration related utilities Logger Custom Logger for Unity that handles parenting and hierarchy of logs Mathl Wet Maths a.k.a MathLake MathLachee, or MathLoony... however you want it. Bunch of static maths functions that are useful, like Cyclic Modulo MeshBuilder The MeshBuilder allows for easier manipulation and creation of meshes. This used to be called the MeshDetails MeshDetails ParticleSystemExtension Extends Particle Systems RectTransformExtension Extends RectRectangle Rist<T> A randomised list. It will store a collection of values with specified weights and provide functionallity to select randomly from the list. Singleton<T> This class creates a Singleton GameObject that will either be lazily initialized when it is referenced for the first time or, grabbed from the scene if an instance already exists. It derives from MonoBehaviour allowing for all of the usual Unity systems to be used. The GameObject is NOT persistent and WILL be destroyed when a new scene is loaded. Subclasses represent a particular game manager (eg. a player manager). NOTE: A subclasses must pass in its own Type as the T parameter, this is so the singleton can typecast the instance member variable to the corrent class. SortedGizmos Spin Spins an object at the given speed Enums Circle.Mode"
  },
  "api/Lachee.Utilities.Instantiator-1.html": {
    "href": "api/Lachee.Utilities.Instantiator-1.html",
    "title": "Class Instantiator<T> | Utilities",
    "keywords": "Class Instantiator<T> Inheritance Object Instantiator<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Lachee.Utilities Assembly : cs.temp.dll.dll Syntax public class Instantiator<T> where T : Object Type Parameters Name Description T Constructors Instantiator(GameObject, Func<GameObject, T>) Declaration public Instantiator(GameObject prefab, Func<GameObject, T> callback) Parameters Type Name Description GameObject prefab Func < GameObject , T> callback Properties localPosition Declaration public Vector3 localPosition { get; set; } Property Value Type Description Vector3 parent Declaration public Transform parent { get; set; } Property Value Type Description Transform prefab Declaration public GameObject prefab { get; } Property Value Type Description GameObject Methods Instantiate() Spawns the object and returns the result of the post event Declaration public T Instantiate() Returns Type Description T"
  },
  "api/Lachee.Utilities.Lazy-1.html": {
    "href": "api/Lachee.Utilities.Lazy-1.html",
    "title": "Class Lazy<T> | Utilities",
    "keywords": "Class Lazy<T> Lazy fetching of components. The component will not be fetched wtih GetComponent until .Value is called for the first time. Inheritance Object Lazy<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Lachee.Utilities Assembly : cs.temp.dll.dll Syntax [Obsolete(\"Use Auto Attributes now\")] public class Lazy<T> where T : Component Type Parameters Name Description T Component to fetch Constructors Lazy(Component) Declaration public Lazy(Component parent) Parameters Type Name Description Component parent Properties Value Declaration public T Value { get; set; } Property Value Type Description T"
  },
  "api/Lachee.Utilities.Linql.html": {
    "href": "api/Lachee.Utilities.Linql.html",
    "title": "Class Linql | Utilities",
    "keywords": "Class Linql LINQ for Lachee's. Provides a collection of LINQ and Enumeration related utilities Inheritance Object Linql Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Lachee.Utilities Assembly : cs.temp.dll.dll Syntax public static class Linql Methods AsEnumerable<T>(ArraySegment<T>) Creates an enumeration of the array segment from the offset to the count Declaration public static IEnumerable<T> AsEnumerable<T>(this ArraySegment<T> arraySegment) Parameters Type Name Description ArraySegment <T> arraySegment Returns Type Description IEnumerable <T> Type Parameters Name Description T Cut<T>(T[], Int32, Int32) Segments and the copies the segmented data into the new array Declaration public static T[] Cut<T>(this T[] array, int from, int count) Parameters Type Name Description T[] array Int32 from Int32 count Returns Type Description T[] Type Parameters Name Description T GetSegment<T>(T[]) Creates a segment from the array Declaration public static ArraySegment<T> GetSegment<T>(this T[] array) Parameters Type Name Description T[] array Returns Type Description ArraySegment <T> Type Parameters Name Description T GetSegment<T>(T[], Int32) Creates a segment from the array Declaration public static ArraySegment<T> GetSegment<T>(this T[] array, int from) Parameters Type Name Description T[] array Int32 from Returns Type Description ArraySegment <T> Type Parameters Name Description T GetSegment<T>(T[], Int32, Int32) Creates a segment from the array Declaration public static ArraySegment<T> GetSegment<T>(this T[] array, int from, int count) Parameters Type Name Description T[] array Int32 from Int32 count Returns Type Description ArraySegment <T> Type Parameters Name Description T Random<TSource>(IEnumerable<TSource>, Int32) Picks a random item from the enumerator by enumerating over a random amount. Do not use this on fixed length arrays or lists, as it is less efficient than a direct lookup. This isn't perfect, and using a flat lookup will have a more distributed random, but this is a useful utility regardless. For more evenly distributed random selection of items, use a Rist Declaration public static TSource Random<TSource>(this IEnumerable<TSource> source, int upperBounds = 2147483647) Parameters Type Name Description IEnumerable <TSource> source The source enumerable Int32 upperBounds The maximum length the enumeration can be. For an accurate random, this has to be >= length of source. Returns Type Description TSource A random item Type Parameters Name Description TSource ToArray<T>(ArraySegment<T>) Copies the array segment into a new array Declaration public static T[] ToArray<T>(this ArraySegment<T> arraySegment) Parameters Type Name Description ArraySegment <T> arraySegment Returns Type Description T[] Type Parameters Name Description T"
  },
  "api/Lachee.Utilities.Logger.html": {
    "href": "api/Lachee.Utilities.Logger.html",
    "title": "Class Logger | Utilities",
    "keywords": "Class Logger Custom Logger for Unity that handles parenting and hierarchy of logs Inheritance Object Logger Namespace : Lachee.Utilities Assembly : cs.temp.dll.dll Syntax public class Logger : ILogHandler Constructors Logger(Logger, String) Declaration public Logger(Logger parent, string tag) Parameters Type Name Description Logger parent String tag Logger(String) Declaration public Logger(string tag) Parameters Type Name Description String tag Properties Parent Declaration public Logger Parent { get; } Property Value Type Description Logger Tag Declaration public string Tag { get; } Property Value Type Description String Methods Error(Object) Declaration public void Error(object message) Parameters Type Name Description Object message Error(Object, UnityEngine.Object) Declaration public void Error(object message, UnityEngine.Object context) Parameters Type Name Description Object message UnityEngine.Object context Error(String, Object[]) Declaration public void Error(string format, params object[] args) Parameters Type Name Description String format Object [] args Error(String, UnityEngine.Object, Object[]) Declaration public void Error(string format, UnityEngine.Object context, params object[] args) Parameters Type Name Description String format UnityEngine.Object context Object [] args Info(Object) Declaration public void Info(object message) Parameters Type Name Description Object message Info(Object, UnityEngine.Object) Declaration public void Info(object message, UnityEngine.Object context) Parameters Type Name Description Object message UnityEngine.Object context Info(String, Object[]) Declaration public void Info(string format, params object[] args) Parameters Type Name Description String format Object [] args Info(String, UnityEngine.Object, Object[]) Declaration public void Info(string format, UnityEngine.Object context, params object[] args) Parameters Type Name Description String format UnityEngine.Object context Object [] args LogException(Exception, UnityEngine.Object) Declaration public void LogException(Exception exception, UnityEngine.Object context) Parameters Type Name Description Exception exception UnityEngine.Object context LogFormat(LogType, UnityEngine.Object, String, Object[]) Declaration public void LogFormat(LogType logType, UnityEngine.Object context, string format, params object[] args) Parameters Type Name Description LogType logType UnityEngine.Object context String format Object [] args Warning(Object) Declaration public void Warning(object message) Parameters Type Name Description Object message Warning(Object, UnityEngine.Object) Declaration public void Warning(object message, UnityEngine.Object context) Parameters Type Name Description Object message UnityEngine.Object context Warning(String, Object[]) Declaration public void Warning(string format, params object[] args) Parameters Type Name Description String format Object [] args Warning(String, UnityEngine.Object, Object[]) Declaration public void Warning(string format, UnityEngine.Object context, params object[] args) Parameters Type Name Description String format UnityEngine.Object context Object [] args"
  },
  "api/Lachee.Utilities.Mathl.html": {
    "href": "api/Lachee.Utilities.Mathl.html",
    "title": "Class Mathl | Utilities",
    "keywords": "Class Mathl Wet Maths a.k.a MathLake MathLachee, or MathLoony... however you want it. Bunch of static maths functions that are useful, like Cyclic Modulo Inheritance Object Mathl Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Lachee.Utilities Assembly : cs.temp.dll.dll Syntax public static class Mathl Methods BitsSet(Int32) Counts the number of bits set in the bitflag. Declaration public static int BitsSet(int i) Parameters Type Name Description Int32 i The bitflag Returns Type Description Int32 Mod(Int32, Int32) Cyclic modulo Thanks SaroVati :3 Declaration public static int Mod(int x, int m) Parameters Type Name Description Int32 x Int32 m Returns Type Description Int32 Overlaps(Rect, Rect, out Rect) Returns true if the other rectangle overlaps this rectangle. Declaration public static bool Overlaps(this Rect self, Rect other, out Rect overlap) Parameters Type Name Description Rect self Rect other Rect overlap The inner overlap rectangle Returns Type Description Boolean"
  },
  "api/Lachee.Utilities.MeshBuilder.html": {
    "href": "api/Lachee.Utilities.MeshBuilder.html",
    "title": "Class MeshBuilder | Utilities",
    "keywords": "Class MeshBuilder The MeshBuilder allows for easier manipulation and creation of meshes. This used to be called the MeshDetails Inheritance Object MeshBuilder Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Lachee.Utilities Assembly : cs.temp.dll.dll Syntax public class MeshBuilder Constructors MeshBuilder() Declaration public MeshBuilder() MeshBuilder(MeshBuilder, MeshBuilder) Declaration public MeshBuilder(MeshBuilder a, MeshBuilder b) Parameters Type Name Description MeshBuilder a MeshBuilder b MeshBuilder(Mesh) Declaration public MeshBuilder(Mesh m) Parameters Type Name Description Mesh m Fields center Declaration protected Vector3 center Field Value Type Description Vector3 colors Declaration protected List<Color> colors Field Value Type Description List < Color > hasCenter Declaration protected bool hasCenter Field Value Type Description Boolean submesh Declaration protected Dictionary<int, List<int>> submesh Field Value Type Description Dictionary < Int32 , List < Int32 >> tris Declaration protected List<int> tris Field Value Type Description List < Int32 > uvs Declaration protected List<Vector2> uvs Field Value Type Description List < Vector2 > verts Declaration protected List<Vector3> verts Field Value Type Description List < Vector3 > Properties submeshCount Declaration public int submeshCount { get; } Property Value Type Description Int32 Methods AddColor(Color) Declaration public void AddColor(Color c) Parameters Type Name Description Color c AddRectangle(Vector3, Vector3, Vector3, Vector3) Creates a rectangle from the given points. Automatically uses correct faces. Declaration public void AddRectangle(Vector3 a, Vector3 b, Vector3 c, Vector3 d) Parameters Type Name Description Vector3 a Vector3 b Vector3 c Vector3 d AddTri(Int32, Int32) Declaration public void AddTri(int a, int s = 0) Parameters Type Name Description Int32 a Int32 s AddTriangle(Vector3, Vector3, Vector3) Declaration public void AddTriangle(Vector3 a, Vector3 b, Vector3 c) Parameters Type Name Description Vector3 a Vector3 b Vector3 c AddTris(Int32, Int32, Int32, Int32) Declaration public void AddTris(int a, int b, int c, int s = 0) Parameters Type Name Description Int32 a Int32 b Int32 c Int32 s AddUV(Vector2) Declaration public void AddUV(Vector2 uv) Parameters Type Name Description Vector2 uv AddUV(Vector2[]) Declaration public void AddUV(params Vector2[] uvs) Parameters Type Name Description Vector2 [] uvs AddVert(Vector3) Declaration public void AddVert(Vector3 v) Parameters Type Name Description Vector3 v AddVert(Vector3[]) Declaration public void AddVert(params Vector3[] vectors) Parameters Type Name Description Vector3 [] vectors Apply(Mesh, Boolean) Declaration public void Apply(Mesh mesh, bool useSubmesh = false) Parameters Type Name Description Mesh mesh Boolean useSubmesh CalculateCenter() Declaration public Vector3 CalculateCenter() Returns Type Description Vector3 CenterMesh(Vector3) Moves the center of the mesh to the position. Moving the verts appropriately Declaration public void CenterMesh(Vector3 position) Parameters Type Name Description Vector3 position The position to center around CountColors() Declaration public int CountColors() Returns Type Description Int32 CountTris() Declaration public int CountTris() Returns Type Description Int32 CountUVs() Declaration public int CountUVs() Returns Type Description Int32 CountVerts() Declaration public int CountVerts() Returns Type Description Int32 Create(String, Boolean, Boolean) Declaration public Mesh Create(string name = \"Generic Mesh\", bool useSubmesh = false, bool isDynamic = false) Parameters Type Name Description String name Boolean useSubmesh Boolean isDynamic Returns Type Description Mesh CreateTriangle() Declaration public void CreateTriangle() CreateTriangle(Int32, Int32, Int32) Declaration public void CreateTriangle(int a, int b, int c) Parameters Type Name Description Int32 a Int32 b Int32 c GetCenter() Declaration public Vector3 GetCenter() Returns Type Description Vector3 GetColor(Int32) Declaration public Color GetColor(int i) Parameters Type Name Description Int32 i Returns Type Description Color GetTri(Int32) Declaration public int GetTri(int i) Parameters Type Name Description Int32 i Returns Type Description Int32 GetTris(Int32) Declaration public int[] GetTris(int i) Parameters Type Name Description Int32 i Returns Type Description Int32 [] GetUV(Int32) Declaration public Vector2 GetUV(int i) Parameters Type Name Description Int32 i Returns Type Description Vector2 GetVert(Int32) Declaration public Vector3 GetVert(int i) Parameters Type Name Description Int32 i Returns Type Description Vector3 GetVerts(Int32[]) Declaration public Vector3[] GetVerts(int[] tris) Parameters Type Name Description Int32 [] tris Returns Type Description Vector3 [] Merge(MeshBuilder, MeshBuilder) Merges 2 MeshDetails together with each one acting as a seperate submesh Declaration public static Mesh Merge(MeshBuilder a, MeshBuilder b) Parameters Type Name Description MeshBuilder a MeshBuilder b Returns Type Description Mesh SetColor(Color) Declaration public void SetColor(Color c) Parameters Type Name Description Color c SetColors(IEnumerable<Color>) Declaration public void SetColors(IEnumerable<Color> colors) Parameters Type Name Description IEnumerable < Color > colors SetTris(IEnumerable<Int32>, Int32) Declaration public void SetTris(IEnumerable<int> polyTris, int s = 0) Parameters Type Name Description IEnumerable < Int32 > polyTris Int32 s SetUVs(IEnumerable<Vector2>) Declaration public void SetUVs(IEnumerable<Vector2> uvs) Parameters Type Name Description IEnumerable < Vector2 > uvs SetVerts(IEnumerable<Vector3>) Declaration public void SetVerts(IEnumerable<Vector3> verts) Parameters Type Name Description IEnumerable < Vector3 > verts Operators Addition(MeshBuilder, MeshBuilder) Declaration public static MeshBuilder operator +(MeshBuilder a, MeshBuilder b) Parameters Type Name Description MeshBuilder a MeshBuilder b Returns Type Description MeshBuilder"
  },
  "api/Lachee.Utilities.MeshDetails.html": {
    "href": "api/Lachee.Utilities.MeshDetails.html",
    "title": "Class MeshDetails | Utilities",
    "keywords": "Class MeshDetails Inheritance Object MeshDetails Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Lachee.Utilities Assembly : cs.temp.dll.dll Syntax [Obsolete(\"Renamed to MeshBuilder\", true)] public class MeshDetails"
  },
  "api/Lachee.Utilities.ParticleSystemExtension.html": {
    "href": "api/Lachee.Utilities.ParticleSystemExtension.html",
    "title": "Class ParticleSystemExtension | Utilities",
    "keywords": "Class ParticleSystemExtension Extends Particle Systems Inheritance Object ParticleSystemExtension Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Lachee.Utilities Assembly : cs.temp.dll.dll Syntax public static class ParticleSystemExtension Methods SetMaxParticles(ParticleSystem, Int32) Sets the max number of particles Declaration public static void SetMaxParticles(this ParticleSystem system, int count) Parameters Type Name Description ParticleSystem system Int32 count"
  },
  "api/Lachee.Utilities.RectTransformExtension.html": {
    "href": "api/Lachee.Utilities.RectTransformExtension.html",
    "title": "Class RectTransformExtension | Utilities",
    "keywords": "Class RectTransformExtension Extends RectRectangle Inheritance Object RectTransformExtension Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Lachee.Utilities Assembly : cs.temp.dll.dll Syntax public static class RectTransformExtension Methods ToScreenSpace(RectTransform) Converts this rect transform to screen space Declaration public static Rect ToScreenSpace(this RectTransform transform) Parameters Type Name Description RectTransform transform Returns Type Description Rect"
  },
  "api/Lachee.Utilities.Rist-1.html": {
    "href": "api/Lachee.Utilities.Rist-1.html",
    "title": "Class Rist<T> | Utilities",
    "keywords": "Class Rist<T> A randomised list. It will store a collection of values with specified weights and provide functionallity to select randomly from the list. Inheritance Object Rist<T> Implements IEnumerable <T> IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Lachee.Utilities Assembly : cs.temp.dll.dll Syntax public class Rist<T> : IEnumerable<T>, IEnumerable Type Parameters Name Description T Type to store as the value. Constructors Rist() Creates a new Random List Declaration public Rist() Rist(Int32) Creates a new Random List with a set capacity. Declaration public Rist(int capacity) Parameters Type Name Description Int32 capacity Properties Count Number of elements currently in the table. Declaration public int Count { get; } Property Value Type Description Int32 TotalWeight The total tally of the weights. Use RecalculateWeights(); to update this value. Declaration public float TotalWeight { get; } Property Value Type Description Single Methods Add(T, Single) Adds a new item with a specified weight to the table and increments the total weight. Declaration public void Add(T item, float weight = 1F) Parameters Type Name Description T item Item to add Single weight Weight this item has Clear() Clears the random table. Declaration public void Clear() GetEnumerator() Gets a enumerator of items in the Rist. Does not apply the random function too it. Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator <T> Randomise(Single, out T) Attempts to pick a random element from the table based of weighting. Declaration public bool Randomise(float random, out T result) Parameters Type Name Description Single random A random value between 0 and 1. This is done so System.Random or Unity.Random can be used. T result The random element that was fetched. Returns Type Description Boolean false if we are unable to find a random element. RecalculateWeights() Recalculates the total weights Declaration public float RecalculateWeights() Returns Type Description Single Explicit Interface Implementations IEnumerable.GetEnumerator() Gets a enumerator of items in the Rist. Does not apply the random function too it. Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Lachee.Utilities.Singleton-1.html": {
    "href": "api/Lachee.Utilities.Singleton-1.html",
    "title": "Class Singleton<T> | Utilities",
    "keywords": "Class Singleton<T> This class creates a Singleton GameObject that will either be lazily initialized when it is referenced for the first time or, grabbed from the scene if an instance already exists. It derives from MonoBehaviour allowing for all of the usual Unity systems to be used. The GameObject is NOT persistent and WILL be destroyed when a new scene is loaded. Subclasses represent a particular game manager (eg. a player manager). NOTE: A subclasses must pass in its own Type as the T parameter, this is so the singleton can typecast the instance member variable to the corrent class. Inheritance Object Singleton<T> Namespace : Lachee.Utilities Assembly : cs.temp.dll.dll Syntax public abstract class Singleton<T> : MonoBehaviour where T : MonoBehaviour Type Parameters Name Description T Fields logger The current logger Declaration public static readonly Logger logger Field Value Type Description Logger wait Waits for the singleton to be available in the scene. Declaration public static readonly WaitWhile wait Field Value Type Description WaitWhile See Also available waitForReference Waits for the singleton to be referenced. Declaration public static readonly WaitWhile waitForReference Field Value Type Description WaitWhile See Also referenced Properties available The singleton instance of the type. Similar to instance , however null will be returned if the instance does not exist instead of trying to create a new gameobject. It will still try to find the gameobject in the scene. Declaration public static T available { get; } Property Value Type Description T exists Does an instance of this singleton exist in the world? Use this to check the validity of the instance before creating one. Short hand for available != null. See also available for a nullable instance that does not create any objects. Declaration [Obsolete(\"Use available or referenced instead\", true)] public static bool exists { get; } Property Value Type Description Boolean instance The singleton instance of the type. Will create a new object with type if it is not available within the scene. Declaration public static T instance { get; set; } Property Value Type Description T referenced Has the instance been assigned / referenced? Will calling instance or available call a FindObjectOfType? Use this to check the validity of the instance before creating one or even locating one. See also available for a nullable instance that does not create any objects. Declaration public static bool referenced { get; } Property Value Type Description Boolean type The current type that belongs to this singleton. Alias of typeof(T) . Declaration public static Type type { get; } Property Value Type Description Type Methods OnApplicationQuit() When Unity quits, it destroys objects in a random order. In principle, a Singleton is only destroyed when application quits. If any script calls instance after it have been destroyed, it will create a buggy ghost object that will stay on the Editor scene when the player stops. This override prevents this from happening and must be called. Declaration protected virtual void OnApplicationQuit()"
  },
  "api/Lachee.Utilities.SortedGizmos.html": {
    "href": "api/Lachee.Utilities.SortedGizmos.html",
    "title": "Class SortedGizmos | Utilities",
    "keywords": "Class SortedGizmos Inheritance Object SortedGizmos Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Lachee.Utilities Assembly : cs.temp.dll.dll Syntax public static class SortedGizmos Fields correctColor Declaration public static bool correctColor Field Value Type Description Boolean Properties color Declaration public static Color color { get; set; } Property Value Type Description Color Methods BatchCommit() Declaration public static void BatchCommit() DrawCube(Vector3, Vector3) Declaration public static void DrawCube(Vector3 center, Vector3 size) Parameters Type Name Description Vector3 center Vector3 size DrawSphere(Vector3, Single) Declaration public static void DrawSphere(Vector3 center, float radius) Parameters Type Name Description Vector3 center Single radius DrawWireCube(Vector3, Vector3) Declaration public static void DrawWireCube(Vector3 center, Vector3 size) Parameters Type Name Description Vector3 center Vector3 size DrawWireSphere(Vector3, Single) Declaration public static void DrawWireSphere(Vector3 center, float radius) Parameters Type Name Description Vector3 center Single radius"
  },
  "api/Lachee.Utilities.Spin.html": {
    "href": "api/Lachee.Utilities.Spin.html",
    "title": "Class Spin | Utilities",
    "keywords": "Class Spin Spins an object at the given speed Inheritance Object Spin Namespace : Lachee.Utilities Assembly : cs.temp.dll.dll Syntax public class Spin : MonoBehaviour Fields speed Declaration public Vector3 speed Field Value Type Description Vector3"
  },
  "index.html": {
    "href": "index.html",
    "title": "Utilities | Utilities",
    "keywords": "Utilities This package contains a collection of useful classes and tools that I have personally used throughout my games. Originating from Party Crashers, I have been slowly building and involving this kit, and now with Unity Package Manager being \"somewhat\" stable, I decided to make a github repository so I can better track the changes and synchronise the numerous versions I have. Since it is just a \"collection of scripts\", there isn't much in the ways of a manual or a theme for the package other than \"hey thats useful\". Since it is all under MIT, you are free to simply extract just the scripts you need, there is no dependencies amongst the files unless explicitly stated in the top of the file (ie: some of the custom editors). Installation There are 3 methods you can use to importing this package: You can download this as a zip and import it directly into unity You can download the .unitypackage generated in the artifacts. a. Github -> Actions b. Generate Unity Package c. Select last succesfull build d. Artifacts -> Unity Package You can add the package to unity via Unity Package Manager, under the \"add git package\" Usage Since this is just a folder of scripts, you can use it how you need it. Check out the documentation for more information. https://lachee.github.io/unity-utilities/"
  }
}