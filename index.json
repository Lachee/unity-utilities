{
  "api/Global.html": {
    "href": "api/Global.html",
    "title": "Namespace Global | Utilities",
    "keywords": "Namespace Global Classes ReferenceFilter"
  },
  "api/Global.ReferenceFilter.html": {
    "href": "api/Global.ReferenceFilter.html",
    "title": "Class ReferenceFilter | Utilities",
    "keywords": "Class ReferenceFilter Inheritance Object ReferenceFilter Namespace : Global Assembly : cs.temp.dll.dll Syntax public class ReferenceFilter : EditorWindow"
  },
  "api/Lachee.Attributes.AutoAttribute.html": {
    "href": "api/Lachee.Attributes.AutoAttribute.html",
    "title": "Class AutoAttribute | Utilities",
    "keywords": "Class AutoAttribute Automatically fetches attached components Inheritance Object AutoAttribute Namespace : Lachee.Attributes Assembly : cs.temp.dll.dll Syntax [AttributeUsage(AttributeTargets.Field, AllowMultiple = false)] public class AutoAttribute : PropertyAttribute Constructors AutoAttribute() Automatically fetches components and hides them in the inspector from this game object Declaration public AutoAttribute() AutoAttribute(AutoSearchFlag) Automatically fetches the components and hides them from the inspector Declaration public AutoAttribute(AutoSearchFlag mode) Parameters Type Name Description AutoSearchFlag mode AutoAttribute(Boolean) Automatically fetches components from this game object. Declaration public AutoAttribute(bool hidden) Parameters Type Name Description Boolean hidden AutoAttribute(Boolean, AutoSearchFlag) Automatically fetches the components Declaration public AutoAttribute(bool hidden, AutoSearchFlag mode) Parameters Type Name Description Boolean hidden AutoSearchFlag mode Properties Hidden Hides the field from the inspector if the value is set. Declaration public bool Hidden { get; set; } Property Value Type Description Boolean SearchFlag Include children in the search for components If applied to an array, then all components found will be used If not applied to an array, then the first component found will be used Declaration public AutoSearchFlag SearchFlag { get; set; } Property Value Type Description AutoSearchFlag"
  },
  "api/Lachee.Attributes.AutoSearchFlag.html": {
    "href": "api/Lachee.Attributes.AutoSearchFlag.html",
    "title": "Enum AutoSearchFlag | Utilities",
    "keywords": "Enum AutoSearchFlag Flag that controls how searching is handled within the AutoAttribute Namespace : Lachee.Attributes Assembly : cs.temp.dll.dll Syntax [Flags] public enum AutoSearchFlag Fields Name Description Children Search the children for the component GameObject Search the GameObject Parent Searches the parent for the component Scene Search the scene for the component"
  },
  "api/Lachee.Attributes.ButtonAttribute.html": {
    "href": "api/Lachee.Attributes.ButtonAttribute.html",
    "title": "Class ButtonAttribute | Utilities",
    "keywords": "Class ButtonAttribute This attribute gives methods buttons within the editor inspector. This will allow for quick execution of the method within the editor. Similar to how ContexMenu works. Inheritance Object ButtonAttribute Namespace : Lachee.Attributes Assembly : cs.temp.dll.dll Syntax [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)] public class ButtonAttribute : PropertyAttribute Constructors ButtonAttribute() Creates a new button in the inspector Declaration public ButtonAttribute() ButtonAttribute(String) Creates a new button in the inspector with specified label. Declaration public ButtonAttribute(string label) Parameters Type Name Description String label The label to appear on the button ButtonAttribute(String, Byte, Byte, Byte) Creates a new button in the inspector with specified label and colour. Declaration public ButtonAttribute(string label, byte r, byte g, byte b) Parameters Type Name Description String label The label to appear on the button Byte r Red value of the colour Byte g Green value of the colour Byte b Blue value of the colour Properties Color The colour to draw the button in. Declaration public Color Color { get; } Property Value Type Description Color Label The label to draw the button as. Declaration public string Label { get; } Property Value Type Description String"
  },
  "api/Lachee.Attributes.Editor.AutoAttributeDrawer.html": {
    "href": "api/Lachee.Attributes.Editor.AutoAttributeDrawer.html",
    "title": "Class AutoAttributeDrawer | Utilities",
    "keywords": "Class AutoAttributeDrawer Inheritance Object AutoAttributeDrawer Namespace : Lachee.Attributes.Editor Assembly : cs.temp.dll.dll Syntax public class AutoAttributeDrawer : PropertyDrawer Methods GetPropertyHeight(SerializedProperty, GUIContent) Declaration public override float GetPropertyHeight(SerializedProperty property, GUIContent label) Parameters Type Name Description SerializedProperty property GUIContent label Returns Type Description Single OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label"
  },
  "api/Lachee.Attributes.Editor.AutoAttributeEditor.AttributeProperty.html": {
    "href": "api/Lachee.Attributes.Editor.AutoAttributeEditor.AttributeProperty.html",
    "title": "Struct AutoAttributeEditor.AttributeProperty | Utilities",
    "keywords": "Struct AutoAttributeEditor.AttributeProperty Path of the attribute with a reference to the attribute itself Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Lachee.Attributes.Editor Assembly : cs.temp.dll.dll Syntax public struct AttributeProperty Fields attribute Declaration public AutoAttribute attribute Field Value Type Description AutoAttribute propertyPath Declaration public string propertyPath Field Value Type Description String"
  },
  "api/Lachee.Attributes.Editor.AutoAttributeEditor.Error.html": {
    "href": "api/Lachee.Attributes.Editor.AutoAttributeEditor.Error.html",
    "title": "Struct AutoAttributeEditor.Error | Utilities",
    "keywords": "Struct AutoAttributeEditor.Error Error state about an attribute Inherited Members ValueType.Equals(Object) ValueType.GetHashCode() ValueType.ToString() Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetType() Namespace : Lachee.Attributes.Editor Assembly : cs.temp.dll.dll Syntax public struct Error Constructors Error(String, Boolean) Declaration public Error(string message, bool blocks) Parameters Type Name Description String message Boolean blocks Fields blocks Declaration public readonly bool blocks Field Value Type Description Boolean message Declaration public readonly string message Field Value Type Description String"
  },
  "api/Lachee.Attributes.Editor.AutoAttributeEditor.html": {
    "href": "api/Lachee.Attributes.Editor.AutoAttributeEditor.html",
    "title": "Class AutoAttributeEditor | Utilities",
    "keywords": "Class AutoAttributeEditor Observes the Auto-Attribute to rebuild lists. Inheritance Object AutoAttributeEditor Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Lachee.Attributes.Editor Assembly : cs.temp.dll.dll Syntax public static class AutoAttributeEditor Properties AutoRefreshInspector Shoudl components auto refresh once per GUI frame when inspecting Declaration public static bool AutoRefreshInspector { get; set; } Property Value Type Description Boolean Errors List of errors from the last check. Call CheckAttribute to update this list. Declaration public static IReadOnlyList<AutoAttributeEditor.ObjectErrors> Errors { get; } Property Value Type Description IReadOnlyList < AutoAttributeEditor.ObjectErrors > IconAuto_16 Declaration public static Texture IconAuto_16 { get; } Property Value Type Description Texture IconAuto_32 Declaration public static Texture IconAuto_32 { get; } Property Value Type Description Texture PreventPlayMode Prevents PlayMode if there is an error Declaration public static bool PreventPlayMode { get; set; } Property Value Type Description Boolean Methods ApplyAttributeToSerializedProperty(SerializedProperty, AutoAttribute) Applies the Attribute to the Serialized Property Declaration public static bool ApplyAttributeToSerializedProperty(SerializedProperty property, AutoAttribute attribute) Parameters Type Name Description SerializedProperty property AutoAttribute attribute Returns Type Description Boolean CheckAttributes() Searches the entire scene and applies all attributes in the scene Declaration public static void CheckAttributes() Validate(SerializedProperty) Checks if the serialized component is missing anything. Note that this does not actually add the property to the error list. Declaration public static AutoAttributeEditor.Error? Validate(SerializedProperty property) Parameters Type Name Description SerializedProperty property The serialized property with the AutoAttribute Returns Type Description Nullable < AutoAttributeEditor.Error > The error, other null."
  },
  "api/Lachee.Attributes.Editor.AutoAttributeEditor.ObjectErrors.html": {
    "href": "api/Lachee.Attributes.Editor.AutoAttributeEditor.ObjectErrors.html",
    "title": "Class AutoAttributeEditor.ObjectErrors | Utilities",
    "keywords": "Class AutoAttributeEditor.ObjectErrors Inheritance Object AutoAttributeEditor.ObjectErrors Implements IReadOnlyDictionary < AutoAttributeEditor.AttributeProperty , AutoAttributeEditor.Error > IReadOnlyCollection < KeyValuePair < AutoAttributeEditor.AttributeProperty , AutoAttributeEditor.Error >> IEnumerable < KeyValuePair < AutoAttributeEditor.AttributeProperty , AutoAttributeEditor.Error >> IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Lachee.Attributes.Editor Assembly : cs.temp.dll.dll Syntax public class ObjectErrors : IReadOnlyDictionary<AutoAttributeEditor.AttributeProperty, AutoAttributeEditor.Error>, IReadOnlyCollection<KeyValuePair<AutoAttributeEditor.AttributeProperty, AutoAttributeEditor.Error>>, IEnumerable<KeyValuePair<AutoAttributeEditor.AttributeProperty, AutoAttributeEditor.Error>>, IEnumerable Constructors ObjectErrors(Object, Dictionary<AutoAttributeEditor.AttributeProperty, AutoAttributeEditor.Error>) Declaration public ObjectErrors(Object component, Dictionary<AutoAttributeEditor.AttributeProperty, AutoAttributeEditor.Error> errors) Parameters Type Name Description Object component Dictionary < AutoAttributeEditor.AttributeProperty , AutoAttributeEditor.Error > errors Properties Component Declaration public Object Component { get; } Property Value Type Description Object Count Declaration public int Count { get; } Property Value Type Description Int32 Item[AutoAttributeEditor.AttributeProperty] Declaration public AutoAttributeEditor.Error this[AutoAttributeEditor.AttributeProperty key] { get; } Parameters Type Name Description AutoAttributeEditor.AttributeProperty key Property Value Type Description AutoAttributeEditor.Error Keys Declaration public IEnumerable<AutoAttributeEditor.AttributeProperty> Keys { get; } Property Value Type Description IEnumerable < AutoAttributeEditor.AttributeProperty > Values Declaration public IEnumerable<AutoAttributeEditor.Error> Values { get; } Property Value Type Description IEnumerable < AutoAttributeEditor.Error > Methods ContainsKey(AutoAttributeEditor.AttributeProperty) Declaration public bool ContainsKey(AutoAttributeEditor.AttributeProperty key) Parameters Type Name Description AutoAttributeEditor.AttributeProperty key Returns Type Description Boolean GetEnumerator() Declaration public IEnumerator<KeyValuePair<AutoAttributeEditor.AttributeProperty, AutoAttributeEditor.Error>> GetEnumerator() Returns Type Description IEnumerator < KeyValuePair < AutoAttributeEditor.AttributeProperty , AutoAttributeEditor.Error >> TryGetValue(AutoAttributeEditor.AttributeProperty, out AutoAttributeEditor.Error) Declaration public bool TryGetValue(AutoAttributeEditor.AttributeProperty key, out AutoAttributeEditor.Error value) Parameters Type Name Description AutoAttributeEditor.AttributeProperty key AutoAttributeEditor.Error value Returns Type Description Boolean Explicit Interface Implementations IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements System.Collections.Generic.IReadOnlyDictionary<TKey,TValue> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Lachee.Attributes.Editor.AutoAttributeWindow.html": {
    "href": "api/Lachee.Attributes.Editor.AutoAttributeWindow.html",
    "title": "Class AutoAttributeWindow | Utilities",
    "keywords": "Class AutoAttributeWindow Inheritance Object AutoAttributeWindow Namespace : Lachee.Attributes.Editor Assembly : cs.temp.dll.dll Syntax public class AutoAttributeWindow : EditorWindow Properties Instance Declaration public static AutoAttributeWindow Instance { get; } Property Value Type Description AutoAttributeWindow Methods OnGUI() Declaration public void OnGUI() ShowWindow() Declaration public static void ShowWindow()"
  },
  "api/Lachee.Attributes.Editor.EditorButton.html": {
    "href": "api/Lachee.Attributes.Editor.EditorButton.html",
    "title": "Class EditorButton | Utilities",
    "keywords": "Class EditorButton Inheritance Object EditorButton Namespace : Lachee.Attributes.Editor Assembly : cs.temp.dll.dll Syntax public class EditorButton : UnityEditor.Editor Methods OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Lachee.Attributes.Editor.EnumFlagDrawer.html": {
    "href": "api/Lachee.Attributes.Editor.EnumFlagDrawer.html",
    "title": "Class EnumFlagDrawer | Utilities",
    "keywords": "Class EnumFlagDrawer Inheritance Object EnumFlagDrawer Namespace : Lachee.Attributes.Editor Assembly : cs.temp.dll.dll Syntax public class EnumFlagDrawer : PropertyDrawer Methods DrawButtons(Rect, SerializedProperty, GUIContent) Declaration public void DrawButtons(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label DrawMask(Rect, SerializedProperty, GUIContent) Declaration public void DrawMask(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label DrawShitButtons(Rect, SerializedProperty, GUIContent) Declaration public void DrawShitButtons(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label"
  },
  "api/Lachee.Attributes.Editor.html": {
    "href": "api/Lachee.Attributes.Editor.html",
    "title": "Namespace Lachee.Attributes.Editor | Utilities",
    "keywords": "Namespace Lachee.Attributes.Editor Classes AutoAttributeDrawer AutoAttributeEditor Observes the Auto-Attribute to rebuild lists. AutoAttributeEditor.ObjectErrors AutoAttributeWindow EditorButton EnumFlagDrawer ReadonlyDrawer ToggleDrawer Structs AutoAttributeEditor.AttributeProperty Path of the attribute with a reference to the attribute itself AutoAttributeEditor.Error Error state about an attribute"
  },
  "api/Lachee.Attributes.Editor.ReadonlyDrawer.html": {
    "href": "api/Lachee.Attributes.Editor.ReadonlyDrawer.html",
    "title": "Class ReadonlyDrawer | Utilities",
    "keywords": "Class ReadonlyDrawer Inheritance Object ReadonlyDrawer Namespace : Lachee.Attributes.Editor Assembly : cs.temp.dll.dll Syntax public class ReadonlyDrawer : PropertyDrawer Methods OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label"
  },
  "api/Lachee.Attributes.Editor.ToggleDrawer.html": {
    "href": "api/Lachee.Attributes.Editor.ToggleDrawer.html",
    "title": "Class ToggleDrawer | Utilities",
    "keywords": "Class ToggleDrawer Inheritance Object ToggleDrawer Namespace : Lachee.Attributes.Editor Assembly : cs.temp.dll.dll Syntax public class ToggleDrawer : PropertyDrawer Methods OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label"
  },
  "api/Lachee.Attributes.EnumFlagAttribute.html": {
    "href": "api/Lachee.Attributes.EnumFlagAttribute.html",
    "title": "Class EnumFlagAttribute | Utilities",
    "keywords": "Class EnumFlagAttribute Assign this attribute to FlagsAttribute enums to give them a mask popup within unity. Inheritance Object EnumFlagAttribute Namespace : Lachee.Attributes Assembly : cs.temp.dll.dll Syntax public class EnumFlagAttribute : PropertyAttribute Constructors EnumFlagAttribute() Declaration public EnumFlagAttribute() EnumFlagAttribute(String, Boolean, Boolean) Make the enum a flag display Declaration public EnumFlagAttribute(string name = \"\", bool isReadonly = false, bool isButtons = true) Parameters Type Name Description String name The display name Boolean isReadonly Should it be just text instead (readonly)? Boolean isButtons Fields buttonMode Declaration public bool buttonMode Field Value Type Description Boolean displayName Declaration public string displayName Field Value Type Description String isReadonly Declaration public bool isReadonly Field Value Type Description Boolean"
  },
  "api/Lachee.Attributes.html": {
    "href": "api/Lachee.Attributes.html",
    "title": "Namespace Lachee.Attributes | Utilities",
    "keywords": "Namespace Lachee.Attributes Classes AutoAttribute Automatically fetches attached components ButtonAttribute This attribute gives methods buttons within the editor inspector. This will allow for quick execution of the method within the editor. Similar to how ContexMenu works. EnumFlagAttribute Assign this attribute to FlagsAttribute enums to give them a mask popup within unity. ReadonlyAttribute Makes object readonly in the editor. ToggleAttribute Marks an attribute as togglable. Enums AutoSearchFlag Flag that controls how searching is handled within the AutoAttribute"
  },
  "api/Lachee.Attributes.ReadonlyAttribute.html": {
    "href": "api/Lachee.Attributes.ReadonlyAttribute.html",
    "title": "Class ReadonlyAttribute | Utilities",
    "keywords": "Class ReadonlyAttribute Makes object readonly in the editor. Inheritance Object ReadonlyAttribute Namespace : Lachee.Attributes Assembly : cs.temp.dll.dll Syntax public class ReadonlyAttribute : PropertyAttribute Constructors ReadonlyAttribute(Boolean, Boolean) Marks this attribute as readonly in the inspector. Declaration public ReadonlyAttribute(bool hideInEditmode = false, bool editableInPlaymode = false) Parameters Type Name Description Boolean hideInEditmode Hide the property all together while in edit mode? Boolean editableInPlaymode Allow the field to be editable in playmode? Fields editableInPlaymode Allow the field to be editable in playmode? Declaration public bool editableInPlaymode Field Value Type Description Boolean hideInEditmode Hide the property all together while in edit mode? Declaration public bool hideInEditmode Field Value Type Description Boolean"
  },
  "api/Lachee.Attributes.ToggleAttribute.html": {
    "href": "api/Lachee.Attributes.ToggleAttribute.html",
    "title": "Class ToggleAttribute | Utilities",
    "keywords": "Class ToggleAttribute Marks an attribute as togglable. Inheritance Object ToggleAttribute Namespace : Lachee.Attributes Assembly : cs.temp.dll.dll Syntax [AttributeUsage(AttributeTargets.Field, AllowMultiple = false)] public sealed class ToggleAttribute : PropertyAttribute Constructors ToggleAttribute() Creates a toggle attribute with the default prefix of @Enabled Declaration public ToggleAttribute() ToggleAttribute(String) Declaration public ToggleAttribute(string field) Parameters Type Name Description String field ToggleAttribute(String, String) Declaration public ToggleAttribute(string field, string tooltip) Parameters Type Name Description String field String tooltip ToggleAttribute(String, String, Boolean) Declaration public ToggleAttribute(string field, string tooltip, bool invert) Parameters Type Name Description String field String tooltip Boolean invert Properties Field The name of the field to store the toggle state under. Declaration public string Field { get; } Property Value Type Description String Remarks Prefix with # for the current variable name Examples [Toggle(Field: \"use_#\")] public Color color; public bool use_color; Invert Inverts the disable state of the UI element so that when ticked it is disabeld Declaration public bool Invert { get; } Property Value Type Description Boolean Tooltip Declaration public string Tooltip { get; } Property Value Type Description String"
  },
  "api/Lachee.Behaviours.html": {
    "href": "api/Lachee.Behaviours.html",
    "title": "Namespace Lachee.Behaviours | Utilities",
    "keywords": "Namespace Lachee.Behaviours Classes PerCameraSettings PerCameraSettings.GlobalShaderProperty PerCameraSettings.RenderSettingsState Rotate Spins an object at the given speed"
  },
  "api/Lachee.Behaviours.PerCameraSettings.GlobalShaderProperty.html": {
    "href": "api/Lachee.Behaviours.PerCameraSettings.GlobalShaderProperty.html",
    "title": "Class PerCameraSettings.GlobalShaderProperty | Utilities",
    "keywords": "Class PerCameraSettings.GlobalShaderProperty Inheritance Object PerCameraSettings.GlobalShaderProperty Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Lachee.Behaviours Assembly : cs.temp.dll.dll Syntax [Serializable] public class GlobalShaderProperty Fields name Declaration public string name Field Value Type Description String revert Declaration public bool revert Field Value Type Description Boolean revertValue Declaration public float revertValue Field Value Type Description Single value Declaration public float value Field Value Type Description Single"
  },
  "api/Lachee.Behaviours.PerCameraSettings.html": {
    "href": "api/Lachee.Behaviours.PerCameraSettings.html",
    "title": "Class PerCameraSettings | Utilities",
    "keywords": "Class PerCameraSettings Inheritance Object PerCameraSettings Namespace : Lachee.Behaviours Assembly : cs.temp.dll.dll Syntax public class PerCameraSettings : MonoBehaviour Fields enabled Declaration public bool enabled Field Value Type Description Boolean properties Declaration public PerCameraSettings.GlobalShaderProperty[] properties Field Value Type Description PerCameraSettings.GlobalShaderProperty [] renderSettings Declaration public PerCameraSettings.RenderSettingsState renderSettings Field Value Type Description PerCameraSettings.RenderSettingsState"
  },
  "api/Lachee.Behaviours.PerCameraSettings.RenderSettingsState.html": {
    "href": "api/Lachee.Behaviours.PerCameraSettings.RenderSettingsState.html",
    "title": "Class PerCameraSettings.RenderSettingsState | Utilities",
    "keywords": "Class PerCameraSettings.RenderSettingsState Inheritance Object PerCameraSettings.RenderSettingsState Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Lachee.Behaviours Assembly : cs.temp.dll.dll Syntax [Serializable] public sealed class RenderSettingsState Fields fog Declaration public bool fog Field Value Type Description Boolean fogColor Declaration public Color fogColor Field Value Type Description Color fogColorInherit Declaration public bool fogColorInherit Field Value Type Description Boolean fogDensity Declaration public float fogDensity Field Value Type Description Single fogDensityInherit Declaration public bool fogDensityInherit Field Value Type Description Boolean fogEndDistance Declaration public float fogEndDistance Field Value Type Description Single fogEndDistanceInherit Declaration public bool fogEndDistanceInherit Field Value Type Description Boolean fogInherit Declaration public bool fogInherit Field Value Type Description Boolean fogMode Declaration public FogMode fogMode Field Value Type Description FogMode fogModeInherit Declaration public bool fogModeInherit Field Value Type Description Boolean fogStartDistance Declaration public float fogStartDistance Field Value Type Description Single fogStartDistanceInherit Declaration public bool fogStartDistanceInherit Field Value Type Description Boolean Methods Apply() Applies the current settings Declaration public void Apply() CreateState() Creates a restore point for all the settings Declaration public void CreateState() FromCurrentRenderSettings() Declaration public static PerCameraSettings.RenderSettingsState FromCurrentRenderSettings() Returns Type Description PerCameraSettings.RenderSettingsState Revert() Reverts the settings by forcefully reverting the state Declaration public void Revert()"
  },
  "api/Lachee.Behaviours.Rotate.html": {
    "href": "api/Lachee.Behaviours.Rotate.html",
    "title": "Class Rotate | Utilities",
    "keywords": "Class Rotate Spins an object at the given speed Inheritance Object Rotate Namespace : Lachee.Behaviours Assembly : cs.temp.dll.dll Syntax public class Rotate : MonoBehaviour Fields speed Declaration public Vector3 speed Field Value Type Description Vector3"
  },
  "api/Lachee.Editor.Behaviours.GlobalShaderPropertyPropertyDrawer.html": {
    "href": "api/Lachee.Editor.Behaviours.GlobalShaderPropertyPropertyDrawer.html",
    "title": "Class GlobalShaderPropertyPropertyDrawer | Utilities",
    "keywords": "Class GlobalShaderPropertyPropertyDrawer Inheritance Object GlobalShaderPropertyPropertyDrawer Namespace : Lachee.Editor.Behaviours Assembly : cs.temp.dll.dll Syntax public class GlobalShaderPropertyPropertyDrawer : PropertyDrawer Methods OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label"
  },
  "api/Lachee.Editor.Behaviours.html": {
    "href": "api/Lachee.Editor.Behaviours.html",
    "title": "Namespace Lachee.Editor.Behaviours | Utilities",
    "keywords": "Namespace Lachee.Editor.Behaviours Classes GlobalShaderPropertyPropertyDrawer"
  },
  "api/Lachee.Tools.Editor.AssemblyDefinitionSolutionProcessor.html": {
    "href": "api/Lachee.Tools.Editor.AssemblyDefinitionSolutionProcessor.html",
    "title": "Class AssemblyDefinitionSolutionProcessor | Utilities",
    "keywords": "Class AssemblyDefinitionSolutionProcessor Fixes Unity generating incorrect solutions for Assembly Definitions. Solution provided by Unity Forums . Inheritance Object AssemblyDefinitionSolutionProcessor Namespace : Lachee.Tools.Editor Assembly : cs.temp.dll.dll Syntax public class AssemblyDefinitionSolutionProcessor : AssetPostprocessor"
  },
  "api/Lachee.Tools.Editor.BoneViewer.BoneStyle.html": {
    "href": "api/Lachee.Tools.Editor.BoneViewer.BoneStyle.html",
    "title": "Enum BoneViewer.BoneStyle | Utilities",
    "keywords": "Enum BoneViewer.BoneStyle Namespace : Lachee.Tools.Editor Assembly : cs.temp.dll.dll Syntax public enum BoneStyle Fields Name Description Cone Line"
  },
  "api/Lachee.Tools.Editor.BoneViewer.html": {
    "href": "api/Lachee.Tools.Editor.BoneViewer.html",
    "title": "Class BoneViewer | Utilities",
    "keywords": "Class BoneViewer Previews bones on a skinned mesh. Originally designed for VRChat Avatars, it will automatically select the first SkinnedMesh to preview. Inheritance Object BoneViewer Namespace : Lachee.Tools.Editor Assembly : cs.temp.dll.dll Syntax public class BoneViewer : UnityEditor.EditorWindow Fields boneStyle Declaration public BoneViewer.BoneStyle boneStyle Field Value Type Description BoneViewer.BoneStyle maxDepth Declaration public int maxDepth Field Value Type Description Int32 maxSelectionDistance Declaration public float maxSelectionDistance Field Value Type Description Single root Declaration public Transform root Field Value Type Description Transform showAnchors Declaration public bool showAnchors Field Value Type Description Boolean showLabels Declaration public bool showLabels Field Value Type Description Boolean showOnlySelectedChild Declaration public bool showOnlySelectedChild Field Value Type Description Boolean Properties AvailableRoot Declaration public static Transform AvailableRoot { get; } Property Value Type Description Transform Methods OpenWindow() Declaration public static void OpenWindow()"
  },
  "api/Lachee.Tools.Editor.EOLConversion.html": {
    "href": "api/Lachee.Tools.Editor.EOLConversion.html",
    "title": "Class EOLConversion | Utilities",
    "keywords": "Class EOLConversion Provides tools to convert line endings Inheritance Object EOLConversion Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Lachee.Tools.Editor Assembly : cs.temp.dll.dll Syntax public class EOLConversion Methods Convert(String) Converts all the assets and returns a list of files that were modified Declaration public static string[] Convert(string lineEnding) Parameters Type Name Description String lineEnding Returns Type Description String []"
  },
  "api/Lachee.Tools.Editor.HelpContext.html": {
    "href": "api/Lachee.Tools.Editor.HelpContext.html",
    "title": "Class HelpContext | Utilities",
    "keywords": "Class HelpContext Inheritance Object HelpContext Namespace : Lachee.Tools.Editor Assembly : cs.temp.dll.dll Syntax public class HelpContext : UnityEditor.Editor Methods HelpContextMenu() Declaration public static void HelpContextMenu()"
  },
  "api/Lachee.Tools.Editor.html": {
    "href": "api/Lachee.Tools.Editor.html",
    "title": "Namespace Lachee.Tools.Editor | Utilities",
    "keywords": "Namespace Lachee.Tools.Editor Classes AssemblyDefinitionSolutionProcessor Fixes Unity generating incorrect solutions for Assembly Definitions. Solution provided by Unity Forums . BoneViewer Previews bones on a skinned mesh. Originally designed for VRChat Avatars, it will automatically select the first SkinnedMesh to preview. EOLConversion Provides tools to convert line endings HelpContext NamespaceConfiguration Automatic namespace configuration NamespaceEditor Handles context menus for the auto namespace NamespaceProcessor Processes C# scripts to add namespaces automatically Enums BoneViewer.BoneStyle"
  },
  "api/Lachee.Tools.Editor.NamespaceConfiguration.html": {
    "href": "api/Lachee.Tools.Editor.NamespaceConfiguration.html",
    "title": "Class NamespaceConfiguration | Utilities",
    "keywords": "Class NamespaceConfiguration Automatic namespace configuration Inheritance Object NamespaceConfiguration Namespace : Lachee.Tools.Editor Assembly : cs.temp.dll.dll Syntax public class NamespaceConfiguration : ScriptableObject Properties FormatDocument Format the documents with dotnet format after namespacing Declaration public bool FormatDocument { get; set; } Property Value Type Description Boolean IncludeSubDirectories Include subdirectories as sub-namespaces Declaration public bool IncludeSubDirectories { get; set; } Property Value Type Description Boolean IsAutomatic Indicates if files should automatically be namespaced Declaration public bool IsAutomatic { get; set; } Property Value Type Description Boolean RootNamespace The namespace to apply to all files under this configuration Declaration public string RootNamespace { get; set; } Property Value Type Description String Methods Reset() Declaration public void Reset()"
  },
  "api/Lachee.Tools.Editor.NamespaceEditor.html": {
    "href": "api/Lachee.Tools.Editor.NamespaceEditor.html",
    "title": "Class NamespaceEditor | Utilities",
    "keywords": "Class NamespaceEditor Handles context menus for the auto namespace Inheritance Object NamespaceEditor Namespace : Lachee.Tools.Editor Assembly : cs.temp.dll.dll Syntax public class NamespaceEditor : UnityEditor.Editor Methods CreateNamespaceConfiguration() Declaration public static void CreateNamespaceConfiguration()"
  },
  "api/Lachee.Tools.Editor.NamespaceProcessor.html": {
    "href": "api/Lachee.Tools.Editor.NamespaceProcessor.html",
    "title": "Class NamespaceProcessor | Utilities",
    "keywords": "Class NamespaceProcessor Processes C# scripts to add namespaces automatically Inheritance Object NamespaceProcessor Namespace : Lachee.Tools.Editor Assembly : cs.temp.dll.dll Syntax public class NamespaceProcessor : UnityEditor.AssetModificationProcessor Methods FormatScripts(IEnumerable<String>) Spawns a Dotnet process to format a list of assets Declaration public static void FormatScripts(IEnumerable<string> assets) Parameters Type Name Description IEnumerable < String > assets FormatScripts(String[]) Declaration public static void FormatScripts(params string[] assets) Parameters Type Name Description String [] assets GetNamespace(String, out NamespaceConfiguration, String) Gets the best namespace for the given file. Declaration public static string GetNamespace(string filePath, out NamespaceConfiguration configuration, string excludePath = \"\") Parameters Type Name Description String filePath The path of the file NamespaceConfiguration configuration The configuration that was used to create the namespace. It will be null if it was created using other means. String excludePath Returns Type Description String GetRootNamespaceConfigurations() Maps the path of a namespace with the actual namespace Declaration public static IReadOnlyDictionary<string, NamespaceConfiguration> GetRootNamespaceConfigurations() Returns Type Description IReadOnlyDictionary < String , NamespaceConfiguration > OnWillCreateAsset(String) This gets called for every .meta file created by the Editor. Declaration public static void OnWillCreateAsset(string path) Parameters Type Name Description String path SetNamespace(String, String) Sets / Replaces the namespace of a given file Declaration public static void SetNamespace(string asset, string namespace) Parameters Type Name Description String asset String namespace"
  },
  "api/Lachee.Utilities.Circle.html": {
    "href": "api/Lachee.Utilities.Circle.html",
    "title": "Class Circle | Utilities",
    "keywords": "Class Circle Inheritance Object Circle Namespace : Lachee.Utilities Assembly : cs.temp.dll.dll Syntax public class Circle : MonoBehaviour Fields lineRenderer Current line renderer Declaration public LineRenderer lineRenderer Field Value Type Description LineRenderer Properties mode Declaration public Circle.Mode mode { get; set; } Property Value Type Description Circle.Mode offset Declaration public Vector3 offset { get; set; } Property Value Type Description Vector3 points Declaration public int points { get; set; } Property Value Type Description Int32 radius Declaration public float radius { get; set; } Property Value Type Description Single Methods UpdatePoints() Declaration public void UpdatePoints()"
  },
  "api/Lachee.Utilities.Circle.Mode.html": {
    "href": "api/Lachee.Utilities.Circle.Mode.html",
    "title": "Enum Circle.Mode | Utilities",
    "keywords": "Enum Circle.Mode Namespace : Lachee.Utilities Assembly : cs.temp.dll.dll Syntax public enum Mode Fields Name Description XY XZ ZY"
  },
  "api/Lachee.Utilities.Editor.html": {
    "href": "api/Lachee.Utilities.Editor.html",
    "title": "Namespace Lachee.Utilities.Editor | Utilities",
    "keywords": "Namespace Lachee.Utilities.Editor Classes SerializedPropertyExtensions"
  },
  "api/Lachee.Utilities.Editor.SerializedPropertyExtensions.html": {
    "href": "api/Lachee.Utilities.Editor.SerializedPropertyExtensions.html",
    "title": "Class SerializedPropertyExtensions | Utilities",
    "keywords": "Class SerializedPropertyExtensions Inheritance Object SerializedPropertyExtensions Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Lachee.Utilities.Editor Assembly : cs.temp.dll.dll Syntax public static class SerializedPropertyExtensions Methods GetFieldInfoFromPath(Type, String, BindingFlags) Gets the field info from the given property path Declaration public static FieldInfo GetFieldInfoFromPath(this Type type, string path, BindingFlags flag = null) Parameters Type Name Description Type type String path BindingFlags flag Returns Type Description FieldInfo GetReadableName(SerializedProperty) Determines the best name for the given property Declaration public static string GetReadableName(this SerializedProperty property) Parameters Type Name Description SerializedProperty property Returns Type Description String GetSerializedFieldInfo(SerializedProperty) Gets the FieldInfo of the underlying field Declaration public static FieldInfo GetSerializedFieldInfo(this SerializedProperty property) Parameters Type Name Description SerializedProperty property The property to get the FieldInfo off Returns Type Description FieldInfo GetSerializedType(SerializedProperty) Gets the type of the underlying field the SerializedProperty is of. Declaration public static Type GetSerializedType(this SerializedProperty property) Parameters Type Name Description SerializedProperty property The property to get the type from Returns Type Description Type GetSerializedValue(SerializedProperty) Gets the raw value of the property Declaration public static object GetSerializedValue(this SerializedProperty property) Parameters Type Name Description SerializedProperty property Returns Type Description Object"
  },
  "api/Lachee.Utilities.GameObjectExtension.html": {
    "href": "api/Lachee.Utilities.GameObjectExtension.html",
    "title": "Class GameObjectExtension | Utilities",
    "keywords": "Class GameObjectExtension Extends GameObject functionality with a collection of utlities Inheritance Object GameObjectExtension Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Lachee.Utilities Assembly : cs.temp.dll.dll Syntax public static class GameObjectExtension Methods SetLayer(GameObject, Int32, LayerMask) Sets the layer of the game object Declaration public static bool SetLayer(this GameObject obj, int layer, LayerMask mask = null) Parameters Type Name Description GameObject obj The game object Int32 layer The new layer LayerMask mask Ignores the object if it doesn't match the mask Returns Type Description Boolean True if it matches and was updated SetLayerRecursive(GameObject, Int32, LayerMask, Boolean) Sets the layer of the game object and its children Declaration public static void SetLayerRecursive(this GameObject obj, int layer, LayerMask mask = null, bool exitEarly = false) Parameters Type Name Description GameObject obj The game object Int32 layer The new layer LayerMask mask Ignores the object if it doesn't match the mask Boolean exitEarly Stops recursion if the object doesn't match the mask"
  },
  "api/Lachee.Utilities.Gizmol.html": {
    "href": "api/Lachee.Utilities.Gizmol.html",
    "title": "Class Gizmol | Utilities",
    "keywords": "Class Gizmol Lachee's Gizmos Inheritance Object Gizmol Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Lachee.Utilities Assembly : cs.temp.dll.dll Syntax public static class Gizmol Methods DrawExclamation(Vector3, Single) Declaration public static void DrawExclamation(Vector3 position, float scale = 1F) Parameters Type Name Description Vector3 position Single scale Label(Vector3, String) Draws a Gizmos text at the given position Declaration public static void Label(Vector3 position, string text) Parameters Type Name Description Vector3 position String text Label(Vector3, String, Object[]) Declaration public static void Label(Vector3 position, string format, params object[] objects) Parameters Type Name Description Vector3 position String format Object [] objects"
  },
  "api/Lachee.Utilities.GLUtils.html": {
    "href": "api/Lachee.Utilities.GLUtils.html",
    "title": "Class GLUtils | Utilities",
    "keywords": "Class GLUtils Collection of tools to draw GL lines directly in the scene view Inheritance Object GLUtils Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Lachee.Utilities Assembly : cs.temp.dll.dll Syntax public static class GLUtils Fields transform Declaration public static Transform transform Field Value Type Description Transform Methods DrawBox(Color, Vector3, Vector2) Draws a box on the XY axis Declaration public static void DrawBox(Color color, Vector3 center, Vector2 size) Parameters Type Name Description Color color Vector3 center Vector2 size DrawBox(Material, Color, Vector3, Vector2) Draws a box on the XY axis Declaration public static void DrawBox(Material material, Color color, Vector3 center, Vector2 size) Parameters Type Name Description Material material Color color Vector3 center Vector2 size DrawCircle(Color, Vector3, Single, Int32) Draws a circle on the XY axis Declaration public static void DrawCircle(Color color, Vector3 center, float radius, int points = 16) Parameters Type Name Description Color color Vector3 center Single radius Int32 points DrawCircle(Material, Color, Vector3, Single, Int32) Draws a circle on the XY Axis Declaration public static void DrawCircle(Material material, Color color, Vector3 center, float radius, int points) Parameters Type Name Description Material material Color color Vector3 center Single radius Int32 points DrawLines(Color, Vector3[]) Declaration public static void DrawLines(Color color, params Vector3[] points) Parameters Type Name Description Color color Vector3 [] points DrawLines(Material, Color, Vector3[]) Declaration public static void DrawLines(Material material, Color color, params Vector3[] points) Parameters Type Name Description Material material Color color Vector3 [] points DrawTest(Transform, Color) Declaration public static void DrawTest(Transform root, Color color) Parameters Type Name Description Transform root Color color DrawTest(Transform, Material, Color) Declaration public static void DrawTest(Transform root, Material material, Color color) Parameters Type Name Description Transform root Material material Color color"
  },
  "api/Lachee.Utilities.html": {
    "href": "api/Lachee.Utilities.html",
    "title": "Namespace Lachee.Utilities | Utilities",
    "keywords": "Namespace Lachee.Utilities Classes Circle GameObjectExtension Extends GameObject functionality with a collection of utlities Gizmol Lachee's Gizmos GLUtils Collection of tools to draw GL lines directly in the scene view Instantiator<T> Lazy<T> Lazy fetching of components. The component will not be fetched wtih GetComponent until .Value is called for the first time. Linq LINQ for Lachee's. Provides a collection of LINQ and Enumeration related utilities Logger Custom Logger for Unity that handles parenting and hierarchy of logs Mathl Wet Maths a.k.a MathLake MathLachee, or MathLoony... however you want it. Bunch of static maths functions that are useful, like Cyclic Modulo MeshBuilder The MeshBuilder allows for easier manipulation and creation of meshes. This used to be called the MeshDetails ParticleSystemExtension Extends Particle Systems RandomList<T> A randomised list. It will store a collection of values with specified weights and provide functionallity to select randomly from the list. RectTransformExtension Extends RectRectangle Rist<T> Weighted randomised list of items. Singleton<T> This class creates a Singleton GameObject that will either be lazily initialized when it is referenced for the first time or, grabbed from the scene if an instance already exists. SortedGizmos TransformExtension Extends Transform Enums Circle.Mode"
  },
  "api/Lachee.Utilities.Instantiator-1.html": {
    "href": "api/Lachee.Utilities.Instantiator-1.html",
    "title": "Class Instantiator<T> | Utilities",
    "keywords": "Class Instantiator<T> Inheritance Object Instantiator<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Lachee.Utilities Assembly : cs.temp.dll.dll Syntax public class Instantiator<T> where T : Object Type Parameters Name Description T Constructors Instantiator(GameObject, Func<GameObject, T>) Declaration public Instantiator(GameObject prefab, Func<GameObject, T> callback) Parameters Type Name Description GameObject prefab Func < GameObject , T> callback Properties localPosition Declaration public Vector3 localPosition { get; set; } Property Value Type Description Vector3 parent Declaration public Transform parent { get; set; } Property Value Type Description Transform prefab Declaration public GameObject prefab { get; } Property Value Type Description GameObject Methods Instantiate() Spawns the object and returns the result of the post event Declaration public T Instantiate() Returns Type Description T"
  },
  "api/Lachee.Utilities.Lazy-1.html": {
    "href": "api/Lachee.Utilities.Lazy-1.html",
    "title": "Class Lazy<T> | Utilities",
    "keywords": "Class Lazy<T> Lazy fetching of components. The component will not be fetched wtih GetComponent until .Value is called for the first time. Inheritance Object Lazy<T> Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Lachee.Utilities Assembly : cs.temp.dll.dll Syntax [Obsolete(\"Use Auto Attributes now\")] public class Lazy<T> where T : Component Type Parameters Name Description T Component to fetch Constructors Lazy(Component) Declaration public Lazy(Component parent) Parameters Type Name Description Component parent Properties Value Declaration public T Value { get; set; } Property Value Type Description T"
  },
  "api/Lachee.Utilities.Linq.html": {
    "href": "api/Lachee.Utilities.Linq.html",
    "title": "Class Linq | Utilities",
    "keywords": "Class Linq LINQ for Lachee's. Provides a collection of LINQ and Enumeration related utilities Inheritance Object Linq Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Lachee.Utilities Assembly : cs.temp.dll.dll Syntax public static class Linq Methods AddRange<T>(HashSet<T>, IEnumerable<T>) Adds a range to the HashSet. Duplicates are ignored. Declaration public static void AddRange<T>(this HashSet<T> hashSet, IEnumerable<T> items) Parameters Type Name Description HashSet <T> hashSet IEnumerable <T> items Enumerable list of items Type Parameters Name Description T AsEnumerable<T>(ArraySegment<T>) Creates an enumeration of the array segment from the offset to the count Declaration public static IEnumerable<T> AsEnumerable<T>(this ArraySegment<T> arraySegment) Parameters Type Name Description ArraySegment <T> arraySegment Returns Type Description IEnumerable <T> Type Parameters Name Description T Cut<T>(T[], Int32, Int32) Segments and the copies the segmented data into the new array Declaration public static T[] Cut<T>(this T[] array, int from, int count) Parameters Type Name Description T[] array Int32 from Int32 count Returns Type Description T[] Type Parameters Name Description T GetSegment<T>(T[]) Creates a segment from the array Declaration public static ArraySegment<T> GetSegment<T>(this T[] array) Parameters Type Name Description T[] array Returns Type Description ArraySegment <T> Type Parameters Name Description T GetSegment<T>(T[], Int32) Creates a segment from the array Declaration public static ArraySegment<T> GetSegment<T>(this T[] array, int from) Parameters Type Name Description T[] array Int32 from Returns Type Description ArraySegment <T> Type Parameters Name Description T GetSegment<T>(T[], Int32, Int32) Creates a segment from the array Declaration public static ArraySegment<T> GetSegment<T>(this T[] array, int from, int count) Parameters Type Name Description T[] array Int32 from Int32 count Returns Type Description ArraySegment <T> Type Parameters Name Description T Random<TSource>(IEnumerable<TSource>, Int32) Picks a random item from the enumerator by enumerating over a random amount. Do not use this on fixed length arrays or lists, as it is less efficient than a direct lookup. This isn't perfect, and using a flat lookup will have a more distributed random, but this is a useful utility regardless. For more evenly distributed random selection of items, use a Rist Declaration public static TSource Random<TSource>(this IEnumerable<TSource> source, int upperBounds = 2147483647) Parameters Type Name Description IEnumerable <TSource> source The source enumerable Int32 upperBounds The maximum length the enumeration can be. For an accurate random, this has to be >= length of source. Returns Type Description TSource A random item Type Parameters Name Description TSource ToArray<T>(ArraySegment<T>) Copies the array segment into a new array Declaration public static T[] ToArray<T>(this ArraySegment<T> arraySegment) Parameters Type Name Description ArraySegment <T> arraySegment Returns Type Description T[] Type Parameters Name Description T"
  },
  "api/Lachee.Utilities.Logger.html": {
    "href": "api/Lachee.Utilities.Logger.html",
    "title": "Class Logger | Utilities",
    "keywords": "Class Logger Custom Logger for Unity that handles parenting and hierarchy of logs Inheritance Object Logger Namespace : Lachee.Utilities Assembly : cs.temp.dll.dll Syntax public class Logger : ILogHandler Constructors Logger(Logger, String) Declaration public Logger(Logger parent, string tag) Parameters Type Name Description Logger parent String tag Logger(String) Declaration public Logger(string tag) Parameters Type Name Description String tag Properties Parent Declaration public Logger Parent { get; } Property Value Type Description Logger Tag Declaration public string Tag { get; } Property Value Type Description String Methods Error(Object) Declaration public void Error(object message) Parameters Type Name Description Object message Error(Object, UnityEngine.Object) Declaration public void Error(object message, UnityEngine.Object context) Parameters Type Name Description Object message UnityEngine.Object context Error(String, Object[]) Declaration public void Error(string format, params object[] args) Parameters Type Name Description String format Object [] args Error(String, UnityEngine.Object, Object[]) Declaration public void Error(string format, UnityEngine.Object context, params object[] args) Parameters Type Name Description String format UnityEngine.Object context Object [] args Info(Object) Declaration public void Info(object message) Parameters Type Name Description Object message Info(Object, UnityEngine.Object) Declaration public void Info(object message, UnityEngine.Object context) Parameters Type Name Description Object message UnityEngine.Object context Info(String, Object[]) Declaration public void Info(string format, params object[] args) Parameters Type Name Description String format Object [] args Info(String, UnityEngine.Object, Object[]) Declaration public void Info(string format, UnityEngine.Object context, params object[] args) Parameters Type Name Description String format UnityEngine.Object context Object [] args LogException(Exception, UnityEngine.Object) Declaration public void LogException(Exception exception, UnityEngine.Object context) Parameters Type Name Description Exception exception UnityEngine.Object context LogFormat(LogType, UnityEngine.Object, String, Object[]) Declaration public void LogFormat(LogType logType, UnityEngine.Object context, string format, params object[] args) Parameters Type Name Description LogType logType UnityEngine.Object context String format Object [] args Warning(Object) Declaration public void Warning(object message) Parameters Type Name Description Object message Warning(Object, UnityEngine.Object) Declaration public void Warning(object message, UnityEngine.Object context) Parameters Type Name Description Object message UnityEngine.Object context Warning(String, Object[]) Declaration public void Warning(string format, params object[] args) Parameters Type Name Description String format Object [] args Warning(String, UnityEngine.Object, Object[]) Declaration public void Warning(string format, UnityEngine.Object context, params object[] args) Parameters Type Name Description String format UnityEngine.Object context Object [] args"
  },
  "api/Lachee.Utilities.Mathl.html": {
    "href": "api/Lachee.Utilities.Mathl.html",
    "title": "Class Mathl | Utilities",
    "keywords": "Class Mathl Wet Maths a.k.a MathLake MathLachee, or MathLoony... however you want it. Bunch of static maths functions that are useful, like Cyclic Modulo Inheritance Object Mathl Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Lachee.Utilities Assembly : cs.temp.dll.dll Syntax public static class Mathl Methods BitsSet(Int32) Counts the number of bits set in the bitflag. Declaration public static int BitsSet(int i) Parameters Type Name Description Int32 i The bitflag Returns Type Description Int32 Extrude(Vector3, Vector3, Single) Extrudes the vector a distance away from the center Declaration public static Vector3 Extrude(this Vector3 vector, Vector3 center, float distance) Parameters Type Name Description Vector3 vector The starting vector Vector3 center The center to extrude away from Single distance The distance to exture Returns Type Description Vector3 Mod(Int32, Int32) Cyclic modulo Thanks SaroVati :3 Declaration public static int Mod(int x, int m) Parameters Type Name Description Int32 x Int32 m Returns Type Description Int32 Overlaps(Rect, Rect, out Rect) Returns true if the other rectangle overlaps this rectangle. Declaration public static bool Overlaps(this Rect self, Rect other, out Rect overlap) Parameters Type Name Description Rect self Rect other Rect overlap The inner overlap rectangle Returns Type Description Boolean"
  },
  "api/Lachee.Utilities.MeshBuilder.html": {
    "href": "api/Lachee.Utilities.MeshBuilder.html",
    "title": "Class MeshBuilder | Utilities",
    "keywords": "Class MeshBuilder The MeshBuilder allows for easier manipulation and creation of meshes. This used to be called the MeshDetails Inheritance Object MeshBuilder Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Lachee.Utilities Assembly : cs.temp.dll.dll Syntax public class MeshBuilder Constructors MeshBuilder() Declaration public MeshBuilder() MeshBuilder(MeshBuilder, MeshBuilder) Declaration public MeshBuilder(MeshBuilder a, MeshBuilder b) Parameters Type Name Description MeshBuilder a MeshBuilder b MeshBuilder(Mesh) Declaration public MeshBuilder(Mesh m) Parameters Type Name Description Mesh m Properties submeshCount Declaration public int submeshCount { get; } Property Value Type Description Int32 Methods AddColor(Color) Declaration public void AddColor(Color c) Parameters Type Name Description Color c AddRectangle(Vector3, Vector3, Vector3, Vector3) Creates a rectangle from the given points. Automatically uses correct faces. Declaration public void AddRectangle(Vector3 a, Vector3 b, Vector3 c, Vector3 d) Parameters Type Name Description Vector3 a Vector3 b Vector3 c Vector3 d AddTri(Int32, Int32) Declaration public void AddTri(int a, int s = 0) Parameters Type Name Description Int32 a Int32 s AddTriangle(Vector3, Vector3, Vector3) Declaration public void AddTriangle(Vector3 a, Vector3 b, Vector3 c) Parameters Type Name Description Vector3 a Vector3 b Vector3 c AddTris(Int32, Int32, Int32, Int32) Declaration public void AddTris(int a, int b, int c, int s = 0) Parameters Type Name Description Int32 a Int32 b Int32 c Int32 s AddUV(Vector2) Declaration public void AddUV(Vector2 uv) Parameters Type Name Description Vector2 uv AddUV(Vector2[]) Declaration public void AddUV(params Vector2[] uvs) Parameters Type Name Description Vector2 [] uvs AddVert(Vector3) Declaration public void AddVert(Vector3 v) Parameters Type Name Description Vector3 v AddVert(Vector3[]) Declaration public void AddVert(params Vector3[] vectors) Parameters Type Name Description Vector3 [] vectors Apply(Mesh, Boolean) Declaration public void Apply(Mesh mesh, bool useSubmesh = false) Parameters Type Name Description Mesh mesh Boolean useSubmesh CalculateCenter() Declaration public Vector3 CalculateCenter() Returns Type Description Vector3 CenterMesh(Vector3) Moves the center of the mesh to the position. Moving the verts appropriately Declaration public void CenterMesh(Vector3 position) Parameters Type Name Description Vector3 position The position to center around CountColors() Declaration public int CountColors() Returns Type Description Int32 CountTris() Declaration public int CountTris() Returns Type Description Int32 CountUVs() Declaration public int CountUVs() Returns Type Description Int32 CountVerts() Declaration public int CountVerts() Returns Type Description Int32 Create(String, Boolean, Boolean) Declaration public Mesh Create(string name = \"Generic Mesh\", bool useSubmesh = false, bool isDynamic = false) Parameters Type Name Description String name Boolean useSubmesh Boolean isDynamic Returns Type Description Mesh CreateTriangle() Declaration public void CreateTriangle() CreateTriangle(Int32, Int32, Int32) Declaration public void CreateTriangle(int a, int b, int c) Parameters Type Name Description Int32 a Int32 b Int32 c GetCenter() Declaration public Vector3 GetCenter() Returns Type Description Vector3 GetColor(Int32) Declaration public Color GetColor(int i) Parameters Type Name Description Int32 i Returns Type Description Color GetTri(Int32) Declaration public int GetTri(int i) Parameters Type Name Description Int32 i Returns Type Description Int32 GetTris(Int32) Declaration public int[] GetTris(int i) Parameters Type Name Description Int32 i Returns Type Description Int32 [] GetUV(Int32) Declaration public Vector2 GetUV(int i) Parameters Type Name Description Int32 i Returns Type Description Vector2 GetVert(Int32) Declaration public Vector3 GetVert(int i) Parameters Type Name Description Int32 i Returns Type Description Vector3 GetVerts(Int32[]) Declaration public Vector3[] GetVerts(int[] tris) Parameters Type Name Description Int32 [] tris Returns Type Description Vector3 [] Merge(MeshBuilder, MeshBuilder) Merges 2 MeshDetails together with each one acting as a seperate submesh Declaration public static Mesh Merge(MeshBuilder a, MeshBuilder b) Parameters Type Name Description MeshBuilder a MeshBuilder b Returns Type Description Mesh SetColor(Color) Declaration public void SetColor(Color c) Parameters Type Name Description Color c SetColors(IEnumerable<Color>) Declaration public void SetColors(IEnumerable<Color> colors) Parameters Type Name Description IEnumerable < Color > colors SetTris(IEnumerable<Int32>, Int32) Declaration public void SetTris(IEnumerable<int> polyTris, int s = 0) Parameters Type Name Description IEnumerable < Int32 > polyTris Int32 s SetUVs(IEnumerable<Vector2>) Declaration public void SetUVs(IEnumerable<Vector2> uvs) Parameters Type Name Description IEnumerable < Vector2 > uvs SetVerts(IEnumerable<Vector3>) Declaration public void SetVerts(IEnumerable<Vector3> verts) Parameters Type Name Description IEnumerable < Vector3 > verts Operators Addition(MeshBuilder, MeshBuilder) Declaration public static MeshBuilder operator +(MeshBuilder a, MeshBuilder b) Parameters Type Name Description MeshBuilder a MeshBuilder b Returns Type Description MeshBuilder"
  },
  "api/Lachee.Utilities.ParticleSystemExtension.html": {
    "href": "api/Lachee.Utilities.ParticleSystemExtension.html",
    "title": "Class ParticleSystemExtension | Utilities",
    "keywords": "Class ParticleSystemExtension Extends Particle Systems Inheritance Object ParticleSystemExtension Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Lachee.Utilities Assembly : cs.temp.dll.dll Syntax public static class ParticleSystemExtension Methods SetMaxParticles(ParticleSystem, Int32) Sets the max number of particles Declaration public static void SetMaxParticles(this ParticleSystem system, int count) Parameters Type Name Description ParticleSystem system Int32 count"
  },
  "api/Lachee.Utilities.RandomList-1.html": {
    "href": "api/Lachee.Utilities.RandomList-1.html",
    "title": "Class RandomList<T> | Utilities",
    "keywords": "Class RandomList<T> A randomised list. It will store a collection of values with specified weights and provide functionallity to select randomly from the list. Inheritance Object RandomList<T> Rist<T> Implements IEnumerable <T> IEnumerable Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Lachee.Utilities Assembly : cs.temp.dll.dll Syntax [Serializable] public class RandomList<T> : IEnumerable<T>, IEnumerable Type Parameters Name Description T Type to store as the value. Constructors RandomList() Creates a new Random List Declaration public RandomList() RandomList(IEnumerable<KeyValuePair<T, Single>>) Declaration public RandomList(IEnumerable<KeyValuePair<T, float>> collection) Parameters Type Name Description IEnumerable < KeyValuePair <T, Single >> collection RandomList(Int32) Creates a new Random List with a set capacity. Declaration public RandomList(int capacity) Parameters Type Name Description Int32 capacity Properties Count Number of elements currently in the table. Declaration public int Count { get; } Property Value Type Description Int32 TotalWeight The total tally of the weights. Declaration public float TotalWeight { get; } Property Value Type Description Single Methods Add(T, Single) Adds a new item with a specified weight to the table and increments the total weight. Declaration public void Add(T item, float weight = 1F) Parameters Type Name Description T item Item to add Single weight Non-negative weight this item has Add(KeyValuePair<T, Single>) Adds a new key value pair Declaration public void Add(KeyValuePair<T, float> pair) Parameters Type Name Description KeyValuePair <T, Single > pair Clear() Clears the random table. Declaration public void Clear() GetEnumerator() Gets a enumerator of items in the Rist. Does not apply the random function too it. Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator <T> GetWeight(T) Gets the weight of a specific item Declaration public float GetWeight(T item) Parameters Type Name Description T item Returns Type Description Single Randomise(Single, out T) Attempts to pick a random element from the table based of weighting. Declaration public bool Randomise(float random, out T result) Parameters Type Name Description Single random A random value between 0 and 1. This is done so System.Random or Unity.Random can be used. T result The random element that was fetched. Returns Type Description Boolean false if we are unable to find a random element. RecalculateWeights() Recalculates the total weights Declaration protected float RecalculateWeights() Returns Type Description Single Remove(T) Removes an item and its weight Declaration public void Remove(T item) Parameters Type Name Description T item The item to remove SetWeight(T, Single) Updates the weight of a specific item Declaration public bool SetWeight(T item, float weight) Parameters Type Name Description T item The item to update Single weight Weight of the item Returns Type Description Boolean If the item exists and was updated TryGetWeight(T, out Single) Tries to get the weight of a specific item Declaration public bool TryGetWeight(T item, out float weight) Parameters Type Name Description T item Single weight Returns Type Description Boolean Explicit Interface Implementations IEnumerable.GetEnumerator() Gets a enumerator of items in the Rist. Does not apply the random function too it. Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description IEnumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Lachee.Utilities.RectTransformExtension.html": {
    "href": "api/Lachee.Utilities.RectTransformExtension.html",
    "title": "Class RectTransformExtension | Utilities",
    "keywords": "Class RectTransformExtension Extends RectRectangle Inheritance Object RectTransformExtension Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Lachee.Utilities Assembly : cs.temp.dll.dll Syntax public static class RectTransformExtension Methods ToScreenSpace(RectTransform) Converts this rect transform to screen space Declaration public static Rect ToScreenSpace(this RectTransform transform) Parameters Type Name Description RectTransform transform Returns Type Description Rect"
  },
  "api/Lachee.Utilities.Rist-1.html": {
    "href": "api/Lachee.Utilities.Rist-1.html",
    "title": "Class Rist<T> | Utilities",
    "keywords": "Class Rist<T> Weighted randomised list of items. Inheritance Object RandomList <T> Rist<T> Implements IEnumerable <T> IEnumerable Inherited Members RandomList<T>.Count RandomList<T>.TotalWeight RandomList<T>.Clear() RandomList<T>.Add(T, Single) RandomList<T>.Add(KeyValuePair<T, Single>) RandomList<T>.Remove(T) RandomList<T>.SetWeight(T, Single) RandomList<T>.GetWeight(T) RandomList<T>.TryGetWeight(T, Single) RandomList<T>.Randomise(Single, T) RandomList<T>.RecalculateWeights() RandomList<T>.GetEnumerator() RandomList<T>.IEnumerable.GetEnumerator() Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Lachee.Utilities Assembly : cs.temp.dll.dll Syntax [Obsolete(\"Rist has been renamed to RandomList\")] public class Rist<T> : RandomList<T>, IEnumerable<T>, IEnumerable Type Parameters Name Description T Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable See Also RandomList <T>"
  },
  "api/Lachee.Utilities.Serialization.BinaryFormatterSurrogate.html": {
    "href": "api/Lachee.Utilities.Serialization.BinaryFormatterSurrogate.html",
    "title": "Class BinaryFormatterSurrogate | Utilities",
    "keywords": "Class BinaryFormatterSurrogate Binary Formatter with support for Unity types. Current supports: Vector2, Vector3, Vector4 Color Quaternion Texture2D Inheritance Object BinaryFormatterSurrogate Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Lachee.Utilities.Serialization Assembly : cs.temp.dll.dll Syntax public static class BinaryFormatterSurrogate Remarks This class is intended for simple saving game state and not to replace Unity's serialization. This means this will be limited to basic data types and not more complicated structures like GameObject or MonoBehaviour. Examples var binaryFormatter = new BinaryFormatter(); BinaryFormatterSurrogate.Use(binaryFormatter); binaryFormatter.Serialize(MyObject); Methods Create() Creates the surrogates to serialize unity types Declaration public static SurrogateSelector Create() Returns Type Description SurrogateSelector Use(BinaryFormatter) Shortcut method that just applies the selector to the formatter. Declaration public static SurrogateSelector Use(BinaryFormatter formatter) Parameters Type Name Description BinaryFormatter formatter Returns Type Description SurrogateSelector"
  },
  "api/Lachee.Utilities.Serialization.ColorSurrogate.html": {
    "href": "api/Lachee.Utilities.Serialization.ColorSurrogate.html",
    "title": "Class ColorSurrogate | Utilities",
    "keywords": "Class ColorSurrogate Inheritance Object VectorSurrogate ColorSurrogate Inherited Members VectorSurrogate.Dimensions VectorSurrogate.GetObjectData(Object, SerializationInfo, StreamingContext) VectorSurrogate.SetObjectData(Object, SerializationInfo, StreamingContext, ISurrogateSelector) Namespace : Lachee.Utilities.Serialization Assembly : cs.temp.dll.dll Syntax public class ColorSurrogate : VectorSurrogate Constructors ColorSurrogate() Declaration public ColorSurrogate() Methods GetDimensionName(Int32) Declaration public override string GetDimensionName(int index) Parameters Type Name Description Int32 index Returns Type Description String Overrides VectorSurrogate.GetDimensionName(Int32)"
  },
  "api/Lachee.Utilities.Serialization.html": {
    "href": "api/Lachee.Utilities.Serialization.html",
    "title": "Namespace Lachee.Utilities.Serialization | Utilities",
    "keywords": "Namespace Lachee.Utilities.Serialization Classes BinaryFormatterSurrogate Binary Formatter with support for Unity types. Current supports: Vector2, Vector3, Vector4 Color Quaternion Texture2D ColorSurrogate Texture2DSurrogate VectorSurrogate"
  },
  "api/Lachee.Utilities.Serialization.Texture2DSurrogate.html": {
    "href": "api/Lachee.Utilities.Serialization.Texture2DSurrogate.html",
    "title": "Class Texture2DSurrogate | Utilities",
    "keywords": "Class Texture2DSurrogate Inheritance Object Texture2DSurrogate Namespace : Lachee.Utilities.Serialization Assembly : cs.temp.dll.dll Syntax public class Texture2DSurrogate : ISerializationSurrogate Methods GetObjectData(Object, SerializationInfo, StreamingContext) Declaration public void GetObjectData(object obj, SerializationInfo info, StreamingContext context) Parameters Type Name Description Object obj SerializationInfo info StreamingContext context SetObjectData(Object, SerializationInfo, StreamingContext, ISurrogateSelector) Declaration public object SetObjectData(object obj, SerializationInfo info, StreamingContext context, ISurrogateSelector selector) Parameters Type Name Description Object obj SerializationInfo info StreamingContext context ISurrogateSelector selector Returns Type Description Object"
  },
  "api/Lachee.Utilities.Serialization.VectorSurrogate.html": {
    "href": "api/Lachee.Utilities.Serialization.VectorSurrogate.html",
    "title": "Class VectorSurrogate | Utilities",
    "keywords": "Class VectorSurrogate Inheritance Object VectorSurrogate ColorSurrogate Namespace : Lachee.Utilities.Serialization Assembly : cs.temp.dll.dll Syntax public class VectorSurrogate : ISerializationSurrogate Constructors VectorSurrogate(Int32) Declaration public VectorSurrogate(int dimensions) Parameters Type Name Description Int32 dimensions Properties Dimensions Declaration public int Dimensions { get; } Property Value Type Description Int32 Methods GetDimensionName(Int32) Declaration public virtual string GetDimensionName(int index) Parameters Type Name Description Int32 index Returns Type Description String GetObjectData(Object, SerializationInfo, StreamingContext) Declaration public void GetObjectData(object obj, SerializationInfo info, StreamingContext context) Parameters Type Name Description Object obj SerializationInfo info StreamingContext context SetObjectData(Object, SerializationInfo, StreamingContext, ISurrogateSelector) Declaration public object SetObjectData(object obj, SerializationInfo info, StreamingContext context, ISurrogateSelector selector) Parameters Type Name Description Object obj SerializationInfo info StreamingContext context ISurrogateSelector selector Returns Type Description Object"
  },
  "api/Lachee.Utilities.Singleton-1.html": {
    "href": "api/Lachee.Utilities.Singleton-1.html",
    "title": "Class Singleton<T> | Utilities",
    "keywords": "Class Singleton<T> This class creates a Singleton GameObject that will either be lazily initialized when it is referenced for the first time or, grabbed from the scene if an instance already exists. Inheritance Object Singleton<T> Namespace : Lachee.Utilities Assembly : cs.temp.dll.dll Syntax public abstract class Singleton<T> : MonoBehaviour where T : Singleton<T> Type Parameters Name Description T The class that is to inherit Singleton Remarks Singleton inherits a , so standard Unity functions apply. However, Awake and OnApplicationQuit have been overriden. Examples This shows how to increment an integer. public class GameManager : Singleton<GameManager> { } Fields logger The current logger Declaration public static readonly Logger logger Field Value Type Description Logger wait Waits for the singleton to be available in the scene. Declaration public static readonly WaitWhile wait Field Value Type Description WaitWhile See Also available waitForReference Waits for the singleton to be referenced. Declaration public static readonly WaitWhile waitForReference Field Value Type Description WaitWhile See Also referenced Properties available The singleton instance of the type. Similar to instance , however null will be returned if the instance does not exist instead of trying to create a new gameobject. It will still try to find the gameobject in the scene. Declaration public static T available { get; } Property Value Type Description T dontDestroyOnLoad Don't destroy the singleton on load. Declaration protected virtual bool dontDestroyOnLoad { get; } Property Value Type Description Boolean Remarks By default, this is set to true. Disabling this allows for scene-specific singletons exists Does an instance of this singleton exist in the world? Use this to check the validity of the instance before creating one. Short hand for available != null. See also available for a nullable instance that does not create any objects. Declaration [Obsolete(\"Use available or referenced instead\", true)] public static bool exists { get; } Property Value Type Description Boolean instance The singleton instance of the type. Will create a new object with type if it is not available within the scene. Declaration public static T instance { get; set; } Property Value Type Description T referenced Has the instance been assigned / referenced? Will calling instance or available call a FindObjectOfType? Use this to check the validity of the instance before creating one or even locating one. See also available for a nullable instance that does not create any objects. Declaration public static bool referenced { get; } Property Value Type Description Boolean type The current type that belongs to this singleton. Alias of typeof(T) . Declaration public static Type type { get; } Property Value Type Description Type Methods Awake() Called when the object is first initialized in the scene. Singleton overrides this to ensure the object does not get destroyed on Load. Declaration protected virtual void Awake() OnApplicationQuit() When Unity quits, it destroys objects in a random order. In principle, a Singleton is only destroyed when application quits. If any script calls instance after it have been destroyed, it will create a buggy ghost object that will stay on the Editor scene when the player stops. This override prevents this from happening and must be called. Declaration protected virtual void OnApplicationQuit()"
  },
  "api/Lachee.Utilities.SortedGizmos.html": {
    "href": "api/Lachee.Utilities.SortedGizmos.html",
    "title": "Class SortedGizmos | Utilities",
    "keywords": "Class SortedGizmos Inheritance Object SortedGizmos Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Lachee.Utilities Assembly : cs.temp.dll.dll Syntax public static class SortedGizmos Fields correctColor Declaration public static bool correctColor Field Value Type Description Boolean Properties color Declaration public static Color color { get; set; } Property Value Type Description Color Methods BatchCommit() Declaration public static void BatchCommit() DrawCube(Vector3, Vector3) Declaration public static void DrawCube(Vector3 center, Vector3 size) Parameters Type Name Description Vector3 center Vector3 size DrawSphere(Vector3, Single) Declaration public static void DrawSphere(Vector3 center, float radius) Parameters Type Name Description Vector3 center Single radius DrawWireCube(Vector3, Vector3) Declaration public static void DrawWireCube(Vector3 center, Vector3 size) Parameters Type Name Description Vector3 center Vector3 size DrawWireSphere(Vector3, Single) Declaration public static void DrawWireSphere(Vector3 center, float radius) Parameters Type Name Description Vector3 center Single radius"
  },
  "api/Lachee.Utilities.TransformExtension.html": {
    "href": "api/Lachee.Utilities.TransformExtension.html",
    "title": "Class TransformExtension | Utilities",
    "keywords": "Class TransformExtension Extends Transform Inheritance Object TransformExtension Inherited Members Object.ToString() Object.Equals(Object) Object.Equals(Object, Object) Object.ReferenceEquals(Object, Object) Object.GetHashCode() Object.GetType() Object.MemberwiseClone() Namespace : Lachee.Utilities Assembly : cs.temp.dll.dll Syntax public static class TransformExtension Methods RotateAround(Transform, Vector3, Quaternion) Rotates around a pivot with the given rotation Declaration public static void RotateAround(this Transform transform, Vector3 pivotPoint, Quaternion rotation) Parameters Type Name Description Transform transform Vector3 pivotPoint Quaternion rotation"
  },
  "index.html": {
    "href": "index.html",
    "title": "Lachee's Utilities | Utilities",
    "keywords": "Lachee's Utilities This package contains a collection of useful classes and tools that I have personally used throughout my games. Originating from Party Crashers, I have been slowly building and involving this kit, and now with Unity Package Manager being \"somewhat\" stable, I decided to make a github repository so I can better track the changes and synchronise the numerous versions I have. Since it is just a \"collection of scripts\", there isn't much in the ways of a manual or a theme for the package other than \"hey thats useful\". Since it is all under MIT, you are free to simply extract just the scripts you need, there is no dependencies amongst the files unless explicitly stated in the top of the file (ie: some of the custom editors). Usage Since this is just a folder of scripts, you can use it how you need it. Check out the documentation for more information. https://lachee.github.io/unity-utilities/ Installation There are 3 methods you can use to importing this package: You can download this as a zip and import it directly into unity You can download the .unitypackage artifacts in the latest build pre-release You can add the package to unity via Unity Package Manager, under the \"add git package\" Via the Package Manager wont notify you of updates, its Unity being dumb. Manual Git Installation This allows you to make changes and commit them back to the project: git clone https://github.com/Lachee/unity-utilities.git Packages/com.lachee.utilties TODO List of things I wish to implement: More Surrogates for Binary Formatter My PlayerPrefs from Cross-Platform as it supports Serialization / Deserialization Fix to my Automatic Namespacer with better support for rules I should rewrite this Configuration panel for stuff? Probably not required"
  }
}