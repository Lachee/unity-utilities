{
  "api/Global.html": {
    "href": "api/Global.html",
    "title": "Namespace Global | Utilities",
    "keywords": "Namespace Global Classes ReferenceFilter"
  },
  "api/Global.ReferenceFilter.html": {
    "href": "api/Global.ReferenceFilter.html",
    "title": "Class ReferenceFilter | Utilities",
    "keywords": "Class ReferenceFilter Inheritance System.Object ReferenceFilter Namespace : Global Assembly : cs.temp.dll.dll Syntax public class ReferenceFilter : EditorWindow"
  },
  "api/Lachee.Attributes.AutoAttribute.html": {
    "href": "api/Lachee.Attributes.AutoAttribute.html",
    "title": "Class AutoAttribute | Utilities",
    "keywords": "Class AutoAttribute Automatically fetches attached components Inheritance System.Object AutoAttribute Namespace : Lachee.Attributes Assembly : cs.temp.dll.dll Syntax [AttributeUsage(AttributeTargets.Field, AllowMultiple = false)] public class AutoAttribute : PropertyAttribute Constructors AutoAttribute() Automatically fetches components and hides them in the inspector from this game object Declaration public AutoAttribute() AutoAttribute(AutoSearchFlag) Automatically fetches the components and hides them from the inspector Declaration public AutoAttribute(AutoSearchFlag mode) Parameters Type Name Description AutoSearchFlag mode AutoAttribute(Boolean) Automatically fetches components from this game object. Declaration public AutoAttribute(bool hidden) Parameters Type Name Description System.Boolean hidden AutoAttribute(Boolean, AutoSearchFlag) Automatically fetches the components Declaration public AutoAttribute(bool hidden, AutoSearchFlag mode) Parameters Type Name Description System.Boolean hidden AutoSearchFlag mode Properties Hidden Hides the field from the inspector if the value is set. Declaration public bool Hidden { get; set; } Property Value Type Description System.Boolean SearchFlag Include children in the search for components If applied to an array, then all components found will be used If not applied to an array, then the first component found will be used Declaration public AutoSearchFlag SearchFlag { get; set; } Property Value Type Description AutoSearchFlag"
  },
  "api/Lachee.Attributes.AutoSearchFlag.html": {
    "href": "api/Lachee.Attributes.AutoSearchFlag.html",
    "title": "Enum AutoSearchFlag | Utilities",
    "keywords": "Enum AutoSearchFlag Flag that controls how searching is handled within the AutoAttribute Namespace : Lachee.Attributes Assembly : cs.temp.dll.dll Syntax [Flags] public enum AutoSearchFlag Fields Name Description Children Search the children for the component GameObject Search the GameObject Parent Searches the parent for the component Scene Search the scene for the component"
  },
  "api/Lachee.Attributes.ButtonAttribute.html": {
    "href": "api/Lachee.Attributes.ButtonAttribute.html",
    "title": "Class ButtonAttribute | Utilities",
    "keywords": "Class ButtonAttribute This attribute gives methods buttons within the editor inspector. This will allow for quick execution of the method within the editor. Similar to how ContexMenu works. Inheritance System.Object ButtonAttribute Namespace : Lachee.Attributes Assembly : cs.temp.dll.dll Syntax [AttributeUsage(AttributeTargets.Method, AllowMultiple = false)] public class ButtonAttribute : PropertyAttribute Constructors ButtonAttribute() Creates a new button in the inspector Declaration public ButtonAttribute() ButtonAttribute(String) Creates a new button in the inspector with specified label. Declaration public ButtonAttribute(string label) Parameters Type Name Description System.String label The label to appear on the button ButtonAttribute(String, Byte, Byte, Byte) Creates a new button in the inspector with specified label and colour. Declaration public ButtonAttribute(string label, byte r, byte g, byte b) Parameters Type Name Description System.String label The label to appear on the button System.Byte r Red value of the colour System.Byte g Green value of the colour System.Byte b Blue value of the colour Properties Color The colour to draw the button in. Declaration public Color Color { get; } Property Value Type Description Color Label The label to draw the button as. Declaration public string Label { get; } Property Value Type Description System.String"
  },
  "api/Lachee.Attributes.Editor.AutoAttributeDrawer.html": {
    "href": "api/Lachee.Attributes.Editor.AutoAttributeDrawer.html",
    "title": "Class AutoAttributeDrawer | Utilities",
    "keywords": "Class AutoAttributeDrawer Inheritance System.Object AutoAttributeDrawer Namespace : Lachee.Attributes.Editor Assembly : cs.temp.dll.dll Syntax public class AutoAttributeDrawer : PropertyDrawer Methods GetPropertyHeight(SerializedProperty, GUIContent) Declaration public override float GetPropertyHeight(SerializedProperty property, GUIContent label) Parameters Type Name Description SerializedProperty property GUIContent label Returns Type Description System.Single OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label"
  },
  "api/Lachee.Attributes.Editor.AutoAttributeEditor.AttributeProperty.html": {
    "href": "api/Lachee.Attributes.Editor.AutoAttributeEditor.AttributeProperty.html",
    "title": "Struct AutoAttributeEditor.AttributeProperty | Utilities",
    "keywords": "Struct AutoAttributeEditor.AttributeProperty Path of the attribute with a reference to the attribute itself Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Lachee.Attributes.Editor Assembly : cs.temp.dll.dll Syntax public struct AttributeProperty Fields attribute Declaration public AutoAttribute attribute Field Value Type Description AutoAttribute propertyPath Declaration public string propertyPath Field Value Type Description System.String"
  },
  "api/Lachee.Attributes.Editor.AutoAttributeEditor.Error.html": {
    "href": "api/Lachee.Attributes.Editor.AutoAttributeEditor.Error.html",
    "title": "Struct AutoAttributeEditor.Error | Utilities",
    "keywords": "Struct AutoAttributeEditor.Error Error state about an attribute Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : Lachee.Attributes.Editor Assembly : cs.temp.dll.dll Syntax public struct Error Constructors Error(String, Boolean) Declaration public Error(string message, bool blocks) Parameters Type Name Description System.String message System.Boolean blocks Fields blocks Declaration public readonly bool blocks Field Value Type Description System.Boolean message Declaration public readonly string message Field Value Type Description System.String"
  },
  "api/Lachee.Attributes.Editor.AutoAttributeEditor.html": {
    "href": "api/Lachee.Attributes.Editor.AutoAttributeEditor.html",
    "title": "Class AutoAttributeEditor | Utilities",
    "keywords": "Class AutoAttributeEditor Observes the Auto-Attribute to rebuild lists. Inheritance System.Object AutoAttributeEditor Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Lachee.Attributes.Editor Assembly : cs.temp.dll.dll Syntax public static class AutoAttributeEditor Properties AutoRefreshInspector Shoudl components auto refresh once per GUI frame when inspecting Declaration public static bool AutoRefreshInspector { get; set; } Property Value Type Description System.Boolean Errors List of errors from the last check. Call CheckAttribute to update this list. Declaration public static IReadOnlyList<AutoAttributeEditor.ObjectErrors> Errors { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < AutoAttributeEditor.ObjectErrors > IconAuto_16 Declaration public static Texture IconAuto_16 { get; } Property Value Type Description Texture IconAuto_32 Declaration public static Texture IconAuto_32 { get; } Property Value Type Description Texture PreventPlayMode Prevents PlayMode if there is an error Declaration public static bool PreventPlayMode { get; set; } Property Value Type Description System.Boolean Methods ApplyAttributeToSerializedProperty(SerializedProperty, AutoAttribute) Applies the Attribute to the Serialized Property Declaration public static bool ApplyAttributeToSerializedProperty(SerializedProperty property, AutoAttribute attribute) Parameters Type Name Description SerializedProperty property AutoAttribute attribute Returns Type Description System.Boolean CheckAttributes() Searches the entire scene and applies all attributes in the scene Declaration public static void CheckAttributes() Validate(SerializedProperty) Checks if the serialized component is missing anything. Note that this does not actually add the property to the error list. Declaration public static AutoAttributeEditor.Error? Validate(SerializedProperty property) Parameters Type Name Description SerializedProperty property The serialized property with the AutoAttribute Returns Type Description System.Nullable < AutoAttributeEditor.Error > The error, other null."
  },
  "api/Lachee.Attributes.Editor.AutoAttributeEditor.ObjectErrors.html": {
    "href": "api/Lachee.Attributes.Editor.AutoAttributeEditor.ObjectErrors.html",
    "title": "Class AutoAttributeEditor.ObjectErrors | Utilities",
    "keywords": "Class AutoAttributeEditor.ObjectErrors Inheritance System.Object AutoAttributeEditor.ObjectErrors Implements System.Collections.Generic.IReadOnlyDictionary < AutoAttributeEditor.AttributeProperty , AutoAttributeEditor.Error > System.Collections.Generic.IReadOnlyCollection < System.Collections.Generic.KeyValuePair < AutoAttributeEditor.AttributeProperty , AutoAttributeEditor.Error >> System.Collections.Generic.IEnumerable < System.Collections.Generic.KeyValuePair < AutoAttributeEditor.AttributeProperty , AutoAttributeEditor.Error >> System.Collections.IEnumerable Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Lachee.Attributes.Editor Assembly : cs.temp.dll.dll Syntax public class ObjectErrors : IReadOnlyDictionary<AutoAttributeEditor.AttributeProperty, AutoAttributeEditor.Error>, IReadOnlyCollection<KeyValuePair<AutoAttributeEditor.AttributeProperty, AutoAttributeEditor.Error>>, IEnumerable<KeyValuePair<AutoAttributeEditor.AttributeProperty, AutoAttributeEditor.Error>>, IEnumerable Constructors ObjectErrors(Object, Dictionary<AutoAttributeEditor.AttributeProperty, AutoAttributeEditor.Error>) Declaration public ObjectErrors(Object component, Dictionary<AutoAttributeEditor.AttributeProperty, AutoAttributeEditor.Error> errors) Parameters Type Name Description Object component System.Collections.Generic.Dictionary < AutoAttributeEditor.AttributeProperty , AutoAttributeEditor.Error > errors Properties Component Declaration public Object Component { get; } Property Value Type Description Object Count Declaration public int Count { get; } Property Value Type Description System.Int32 Item[AutoAttributeEditor.AttributeProperty] Declaration public AutoAttributeEditor.Error this[AutoAttributeEditor.AttributeProperty key] { get; } Parameters Type Name Description AutoAttributeEditor.AttributeProperty key Property Value Type Description AutoAttributeEditor.Error Keys Declaration public IEnumerable<AutoAttributeEditor.AttributeProperty> Keys { get; } Property Value Type Description System.Collections.Generic.IEnumerable < AutoAttributeEditor.AttributeProperty > Values Declaration public IEnumerable<AutoAttributeEditor.Error> Values { get; } Property Value Type Description System.Collections.Generic.IEnumerable < AutoAttributeEditor.Error > Methods ContainsKey(AutoAttributeEditor.AttributeProperty) Declaration public bool ContainsKey(AutoAttributeEditor.AttributeProperty key) Parameters Type Name Description AutoAttributeEditor.AttributeProperty key Returns Type Description System.Boolean GetEnumerator() Declaration public IEnumerator<KeyValuePair<AutoAttributeEditor.AttributeProperty, AutoAttributeEditor.Error>> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < System.Collections.Generic.KeyValuePair < AutoAttributeEditor.AttributeProperty , AutoAttributeEditor.Error >> TryGetValue(AutoAttributeEditor.AttributeProperty, out AutoAttributeEditor.Error) Declaration public bool TryGetValue(AutoAttributeEditor.AttributeProperty key, out AutoAttributeEditor.Error value) Parameters Type Name Description AutoAttributeEditor.AttributeProperty key AutoAttributeEditor.Error value Returns Type Description System.Boolean Explicit Interface Implementations IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.Collections.Generic.IReadOnlyDictionary<TKey, TValue> System.Collections.Generic.IReadOnlyCollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Lachee.Attributes.Editor.AutoAttributeWindow.html": {
    "href": "api/Lachee.Attributes.Editor.AutoAttributeWindow.html",
    "title": "Class AutoAttributeWindow | Utilities",
    "keywords": "Class AutoAttributeWindow Inheritance System.Object AutoAttributeWindow Namespace : Lachee.Attributes.Editor Assembly : cs.temp.dll.dll Syntax public class AutoAttributeWindow : EditorWindow Properties Instance Declaration public static AutoAttributeWindow Instance { get; } Property Value Type Description AutoAttributeWindow Methods OnGUI() Declaration public void OnGUI() ShowWindow() Declaration public static void ShowWindow()"
  },
  "api/Lachee.Attributes.Editor.EditorButton.html": {
    "href": "api/Lachee.Attributes.Editor.EditorButton.html",
    "title": "Class EditorButton | Utilities",
    "keywords": "Class EditorButton Inheritance System.Object EditorButton Namespace : Lachee.Attributes.Editor Assembly : cs.temp.dll.dll Syntax public class EditorButton : UnityEditor.Editor Methods OnInspectorGUI() Declaration public override void OnInspectorGUI()"
  },
  "api/Lachee.Attributes.Editor.EnumFlagDrawer.html": {
    "href": "api/Lachee.Attributes.Editor.EnumFlagDrawer.html",
    "title": "Class EnumFlagDrawer | Utilities",
    "keywords": "Class EnumFlagDrawer Inheritance System.Object EnumFlagDrawer Namespace : Lachee.Attributes.Editor Assembly : cs.temp.dll.dll Syntax public class EnumFlagDrawer : PropertyDrawer Methods DrawButtons(Rect, SerializedProperty, GUIContent) Declaration public void DrawButtons(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label DrawMask(Rect, SerializedProperty, GUIContent) Declaration public void DrawMask(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label DrawShitButtons(Rect, SerializedProperty, GUIContent) Declaration public void DrawShitButtons(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label"
  },
  "api/Lachee.Attributes.Editor.html": {
    "href": "api/Lachee.Attributes.Editor.html",
    "title": "Namespace Lachee.Attributes.Editor | Utilities",
    "keywords": "Namespace Lachee.Attributes.Editor Classes AutoAttributeDrawer AutoAttributeEditor Observes the Auto-Attribute to rebuild lists. AutoAttributeEditor.ObjectErrors AutoAttributeWindow EditorButton EnumFlagDrawer LabelDrawer ReadonlyDrawer SceneAttributeDrawer SlideDrawer ToggleDrawer Structs AutoAttributeEditor.AttributeProperty Path of the attribute with a reference to the attribute itself AutoAttributeEditor.Error Error state about an attribute"
  },
  "api/Lachee.Attributes.Editor.LabelDrawer.html": {
    "href": "api/Lachee.Attributes.Editor.LabelDrawer.html",
    "title": "Class LabelDrawer | Utilities",
    "keywords": "Class LabelDrawer Inheritance System.Object LabelDrawer Namespace : Lachee.Attributes.Editor Assembly : cs.temp.dll.dll Syntax public class LabelDrawer : PropertyDrawer Methods OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label"
  },
  "api/Lachee.Attributes.Editor.ReadonlyDrawer.html": {
    "href": "api/Lachee.Attributes.Editor.ReadonlyDrawer.html",
    "title": "Class ReadonlyDrawer | Utilities",
    "keywords": "Class ReadonlyDrawer Inheritance System.Object ReadonlyDrawer Namespace : Lachee.Attributes.Editor Assembly : cs.temp.dll.dll Syntax public class ReadonlyDrawer : PropertyDrawer Methods OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label"
  },
  "api/Lachee.Attributes.Editor.SceneAttributeDrawer.html": {
    "href": "api/Lachee.Attributes.Editor.SceneAttributeDrawer.html",
    "title": "Class SceneAttributeDrawer | Utilities",
    "keywords": "Class SceneAttributeDrawer Inheritance System.Object SceneAttributeDrawer Namespace : Lachee.Attributes.Editor Assembly : cs.temp.dll.dll Syntax public class SceneAttributeDrawer : PropertyDrawer Methods GetPropertyHeight(SerializedProperty, GUIContent) Declaration public override float GetPropertyHeight(SerializedProperty property, GUIContent label) Parameters Type Name Description SerializedProperty property GUIContent label Returns Type Description System.Single OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label Validate(SerializedProperty) Declaration public bool Validate(SerializedProperty property) Parameters Type Name Description SerializedProperty property Returns Type Description System.Boolean"
  },
  "api/Lachee.Attributes.Editor.SlideDrawer.html": {
    "href": "api/Lachee.Attributes.Editor.SlideDrawer.html",
    "title": "Class SlideDrawer | Utilities",
    "keywords": "Class SlideDrawer Inheritance System.Object SlideDrawer Namespace : Lachee.Attributes.Editor Assembly : cs.temp.dll.dll Syntax public class SlideDrawer : PropertyDrawer Methods GetPropertyHeight(SerializedProperty, GUIContent) Declaration public override float GetPropertyHeight(SerializedProperty property, GUIContent label) Parameters Type Name Description SerializedProperty property GUIContent label Returns Type Description System.Single OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label"
  },
  "api/Lachee.Attributes.Editor.ToggleDrawer.html": {
    "href": "api/Lachee.Attributes.Editor.ToggleDrawer.html",
    "title": "Class ToggleDrawer | Utilities",
    "keywords": "Class ToggleDrawer Inheritance System.Object ToggleDrawer Namespace : Lachee.Attributes.Editor Assembly : cs.temp.dll.dll Syntax public class ToggleDrawer : PropertyDrawer Methods OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label"
  },
  "api/Lachee.Attributes.EnumFlagAttribute.html": {
    "href": "api/Lachee.Attributes.EnumFlagAttribute.html",
    "title": "Class EnumFlagAttribute | Utilities",
    "keywords": "Class EnumFlagAttribute Assign this attribute to System.FlagsAttribute enums to give them a mask popup within unity. Inheritance System.Object EnumFlagAttribute Namespace : Lachee.Attributes Assembly : cs.temp.dll.dll Syntax public class EnumFlagAttribute : PropertyAttribute Constructors EnumFlagAttribute() Declaration public EnumFlagAttribute() EnumFlagAttribute(String, Boolean, Boolean) Make the enum a flag display Declaration public EnumFlagAttribute(string name = \"\", bool isReadonly = false, bool isButtons = true) Parameters Type Name Description System.String name The display name System.Boolean isReadonly Should it be just text instead (readonly)? System.Boolean isButtons Fields buttonMode Declaration public bool buttonMode Field Value Type Description System.Boolean displayName Declaration public string displayName Field Value Type Description System.String isReadonly Declaration public bool isReadonly Field Value Type Description System.Boolean"
  },
  "api/Lachee.Attributes.html": {
    "href": "api/Lachee.Attributes.html",
    "title": "Namespace Lachee.Attributes | Utilities",
    "keywords": "Namespace Lachee.Attributes Classes AutoAttribute Automatically fetches attached components ButtonAttribute This attribute gives methods buttons within the editor inspector. This will allow for quick execution of the method within the editor. Similar to how ContexMenu works. EnumFlagAttribute Assign this attribute to System.FlagsAttribute enums to give them a mask popup within unity. LabelAttribute Makes object readonly in the editor. ReadonlyAttribute Makes object readonly in the editor. SceneAttribute SlideAttribute ToggleAttribute Marks an attribute as togglable. Enums AutoSearchFlag Flag that controls how searching is handled within the AutoAttribute"
  },
  "api/Lachee.Attributes.LabelAttribute.html": {
    "href": "api/Lachee.Attributes.LabelAttribute.html",
    "title": "Class LabelAttribute | Utilities",
    "keywords": "Class LabelAttribute Makes object readonly in the editor. Inheritance System.Object LabelAttribute Namespace : Lachee.Attributes Assembly : cs.temp.dll.dll Syntax public class LabelAttribute : PropertyAttribute Constructors LabelAttribute(GUIContent) Creates a new label from the GUIContent Declaration public LabelAttribute(GUIContent content) Parameters Type Name Description GUIContent content LabelAttribute(String, String) Creates a label Declaration public LabelAttribute(string label, string tooltip = \"\") Parameters Type Name Description System.String label The name of the property System.String tooltip The tooltip for the property Fields label The label and tooltip for the property. Declaration public GUIContent label Field Value Type Description GUIContent"
  },
  "api/Lachee.Attributes.ReadonlyAttribute.html": {
    "href": "api/Lachee.Attributes.ReadonlyAttribute.html",
    "title": "Class ReadonlyAttribute | Utilities",
    "keywords": "Class ReadonlyAttribute Makes object readonly in the editor. Inheritance System.Object ReadonlyAttribute Namespace : Lachee.Attributes Assembly : cs.temp.dll.dll Syntax public class ReadonlyAttribute : PropertyAttribute Constructors ReadonlyAttribute(Boolean, Boolean, Boolean) Marks this attribute as readonly in the inspector. Declaration public ReadonlyAttribute(bool hideInEditmode = false, bool editableInPlaymode = false, bool editableInEditmode = false) Parameters Type Name Description System.Boolean hideInEditmode Hide the property all together while in edit mode? System.Boolean editableInPlaymode Allow the field to be editable in playmode? System.Boolean editableInEditmode Fields editableInEditmode Allow the field to be editable in editmode? Declaration public bool editableInEditmode Field Value Type Description System.Boolean editableInPlaymode Allow the field to be editable in playmode? Declaration public bool editableInPlaymode Field Value Type Description System.Boolean hideInEditmode Hide the property all together while in edit mode? Declaration public bool hideInEditmode Field Value Type Description System.Boolean"
  },
  "api/Lachee.Attributes.SceneAttribute.html": {
    "href": "api/Lachee.Attributes.SceneAttribute.html",
    "title": "Class SceneAttribute | Utilities",
    "keywords": "Class SceneAttribute Inheritance System.Object SceneAttribute Namespace : Lachee.Attributes Assembly : cs.temp.dll.dll Syntax [AttributeUsage(AttributeTargets.Field, AllowMultiple = true)] public class SceneAttribute : PropertyAttribute"
  },
  "api/Lachee.Attributes.SlideAttribute.html": {
    "href": "api/Lachee.Attributes.SlideAttribute.html",
    "title": "Class SlideAttribute | Utilities",
    "keywords": "Class SlideAttribute Inheritance System.Object SlideAttribute Namespace : Lachee.Attributes Assembly : cs.temp.dll.dll Syntax [AttributeUsage(AttributeTargets.Field, AllowMultiple = false)] public sealed class SlideAttribute : PropertyAttribute Constructors SlideAttribute(Single, Single) Declaration public SlideAttribute(float min, float max) Parameters Type Name Description System.Single min System.Single max SlideAttribute(Single, Single, GUIContent, GUIContent) Declaration public SlideAttribute(float min, float max, GUIContent leftLabel, GUIContent rightLabel) Parameters Type Name Description System.Single min System.Single max GUIContent leftLabel GUIContent rightLabel SlideAttribute(Single, Single, String, String) Declaration public SlideAttribute(float min, float max, string leftLabel, string rightLabel) Parameters Type Name Description System.Single min System.Single max System.String leftLabel System.String rightLabel Properties LeftLabel Declaration public GUIContent LeftLabel { get; } Property Value Type Description GUIContent Max Declaration public float Max { get; } Property Value Type Description System.Single Min Declaration public float Min { get; } Property Value Type Description System.Single RightLabel Declaration public GUIContent RightLabel { get; } Property Value Type Description GUIContent"
  },
  "api/Lachee.Attributes.ToggleAttribute.html": {
    "href": "api/Lachee.Attributes.ToggleAttribute.html",
    "title": "Class ToggleAttribute | Utilities",
    "keywords": "Class ToggleAttribute Marks an attribute as togglable. Inheritance System.Object ToggleAttribute Namespace : Lachee.Attributes Assembly : cs.temp.dll.dll Syntax [AttributeUsage(AttributeTargets.Field, AllowMultiple = false)] public sealed class ToggleAttribute : PropertyAttribute Constructors ToggleAttribute() Creates a toggle attribute with the default prefix of @Enabled Declaration public ToggleAttribute() ToggleAttribute(String) Declaration public ToggleAttribute(string field) Parameters Type Name Description System.String field ToggleAttribute(String, String) Declaration public ToggleAttribute(string field, string tooltip) Parameters Type Name Description System.String field System.String tooltip ToggleAttribute(String, String, Boolean) Declaration public ToggleAttribute(string field, string tooltip, bool invert) Parameters Type Name Description System.String field System.String tooltip System.Boolean invert Properties Field The name of the field to store the toggle state under. Declaration public string Field { get; } Property Value Type Description System.String Remarks Prefix with # for the current variable name Examples [Toggle(Field: \"use_#\")] public Color color; public bool use_color; Invert Inverts the disable state of the UI element so that when ticked it is disabeld Declaration public bool Invert { get; } Property Value Type Description System.Boolean ShowCheckbox Shows the checkbox to enable/disable he field Declaration public bool ShowCheckbox { get; set; } Property Value Type Description System.Boolean Tooltip Declaration public string Tooltip { get; } Property Value Type Description System.String"
  },
  "api/Lachee.Behaviours.html": {
    "href": "api/Lachee.Behaviours.html",
    "title": "Namespace Lachee.Behaviours | Utilities",
    "keywords": "Namespace Lachee.Behaviours Classes PerCameraSettings PerCameraSettings.GlobalShaderProperty PerCameraSettings.RenderSettingsState Rotate Spins an object at the given speed"
  },
  "api/Lachee.Behaviours.PerCameraSettings.GlobalShaderProperty.html": {
    "href": "api/Lachee.Behaviours.PerCameraSettings.GlobalShaderProperty.html",
    "title": "Class PerCameraSettings.GlobalShaderProperty | Utilities",
    "keywords": "Class PerCameraSettings.GlobalShaderProperty Inheritance System.Object PerCameraSettings.GlobalShaderProperty Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Lachee.Behaviours Assembly : cs.temp.dll.dll Syntax [Serializable] public class GlobalShaderProperty Fields name Declaration public string name Field Value Type Description System.String revert Declaration public bool revert Field Value Type Description System.Boolean revertValue Declaration public float revertValue Field Value Type Description System.Single value Declaration public float value Field Value Type Description System.Single"
  },
  "api/Lachee.Behaviours.PerCameraSettings.html": {
    "href": "api/Lachee.Behaviours.PerCameraSettings.html",
    "title": "Class PerCameraSettings | Utilities",
    "keywords": "Class PerCameraSettings Inheritance System.Object PerCameraSettings Namespace : Lachee.Behaviours Assembly : cs.temp.dll.dll Syntax public class PerCameraSettings : MonoBehaviour Fields active Declaration public bool active Field Value Type Description System.Boolean properties Declaration public PerCameraSettings.GlobalShaderProperty[] properties Field Value Type Description PerCameraSettings.GlobalShaderProperty [] renderSettings Declaration public PerCameraSettings.RenderSettingsState renderSettings Field Value Type Description PerCameraSettings.RenderSettingsState"
  },
  "api/Lachee.Behaviours.PerCameraSettings.RenderSettingsState.html": {
    "href": "api/Lachee.Behaviours.PerCameraSettings.RenderSettingsState.html",
    "title": "Class PerCameraSettings.RenderSettingsState | Utilities",
    "keywords": "Class PerCameraSettings.RenderSettingsState Inheritance System.Object PerCameraSettings.RenderSettingsState Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Lachee.Behaviours Assembly : cs.temp.dll.dll Syntax [Serializable] public sealed class RenderSettingsState Fields fog Declaration public bool fog Field Value Type Description System.Boolean fogColor Declaration public Color fogColor Field Value Type Description Color fogColorInherit Declaration public bool fogColorInherit Field Value Type Description System.Boolean fogDensity Declaration public float fogDensity Field Value Type Description System.Single fogDensityInherit Declaration public bool fogDensityInherit Field Value Type Description System.Boolean fogEndDistance Declaration public float fogEndDistance Field Value Type Description System.Single fogEndDistanceInherit Declaration public bool fogEndDistanceInherit Field Value Type Description System.Boolean fogInherit Declaration public bool fogInherit Field Value Type Description System.Boolean fogMode Declaration public FogMode fogMode Field Value Type Description FogMode fogModeInherit Declaration public bool fogModeInherit Field Value Type Description System.Boolean fogStartDistance Declaration public float fogStartDistance Field Value Type Description System.Single fogStartDistanceInherit Declaration public bool fogStartDistanceInherit Field Value Type Description System.Boolean Methods Apply() Applies the current settings Declaration public void Apply() CreateState() Creates a restore point for all the settings Declaration public void CreateState() FromCurrentRenderSettings() Declaration public static PerCameraSettings.RenderSettingsState FromCurrentRenderSettings() Returns Type Description PerCameraSettings.RenderSettingsState Revert() Reverts the settings by forcefully reverting the state Declaration public void Revert()"
  },
  "api/Lachee.Behaviours.Rotate.html": {
    "href": "api/Lachee.Behaviours.Rotate.html",
    "title": "Class Rotate | Utilities",
    "keywords": "Class Rotate Spins an object at the given speed Inheritance System.Object Rotate Namespace : Lachee.Behaviours Assembly : cs.temp.dll.dll Syntax public class Rotate : MonoBehaviour Fields speed Declaration public Vector3 speed Field Value Type Description Vector3"
  },
  "api/Lachee.Editor.Behaviours.GlobalShaderPropertyPropertyDrawer.html": {
    "href": "api/Lachee.Editor.Behaviours.GlobalShaderPropertyPropertyDrawer.html",
    "title": "Class GlobalShaderPropertyPropertyDrawer | Utilities",
    "keywords": "Class GlobalShaderPropertyPropertyDrawer Inheritance System.Object GlobalShaderPropertyPropertyDrawer Namespace : Lachee.Editor.Behaviours Assembly : cs.temp.dll.dll Syntax public class GlobalShaderPropertyPropertyDrawer : PropertyDrawer Methods OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label"
  },
  "api/Lachee.Editor.Behaviours.html": {
    "href": "api/Lachee.Editor.Behaviours.html",
    "title": "Namespace Lachee.Editor.Behaviours | Utilities",
    "keywords": "Namespace Lachee.Editor.Behaviours Classes GlobalShaderPropertyPropertyDrawer"
  },
  "api/Lachee.Tools.Editor.AssemblyDefinitionSolutionProcessor.html": {
    "href": "api/Lachee.Tools.Editor.AssemblyDefinitionSolutionProcessor.html",
    "title": "Class AssemblyDefinitionSolutionProcessor | Utilities",
    "keywords": "Class AssemblyDefinitionSolutionProcessor Fixes Unity generating incorrect solutions for Assembly Definitions. Solution provided by Unity Forums . Inheritance System.Object AssemblyDefinitionSolutionProcessor Namespace : Lachee.Tools.Editor Assembly : cs.temp.dll.dll Syntax public class AssemblyDefinitionSolutionProcessor : AssetPostprocessor"
  },
  "api/Lachee.Tools.Editor.BoneViewer.BoneStyle.html": {
    "href": "api/Lachee.Tools.Editor.BoneViewer.BoneStyle.html",
    "title": "Enum BoneViewer.BoneStyle | Utilities",
    "keywords": "Enum BoneViewer.BoneStyle Namespace : Lachee.Tools.Editor Assembly : cs.temp.dll.dll Syntax public enum BoneStyle Fields Name Description Cone Line"
  },
  "api/Lachee.Tools.Editor.BoneViewer.html": {
    "href": "api/Lachee.Tools.Editor.BoneViewer.html",
    "title": "Class BoneViewer | Utilities",
    "keywords": "Class BoneViewer Previews bones on a skinned mesh. Originally designed for VRChat Avatars, it will automatically select the first SkinnedMesh to preview. Inheritance System.Object BoneViewer Namespace : Lachee.Tools.Editor Assembly : cs.temp.dll.dll Syntax public class BoneViewer : UnityEditor.EditorWindow Fields boneStyle Declaration public BoneViewer.BoneStyle boneStyle Field Value Type Description BoneViewer.BoneStyle maxDepth Declaration public int maxDepth Field Value Type Description System.Int32 maxSelectionDistance Declaration public float maxSelectionDistance Field Value Type Description System.Single root Declaration public Transform root Field Value Type Description Transform showAnchors Declaration public bool showAnchors Field Value Type Description System.Boolean showLabels Declaration public bool showLabels Field Value Type Description System.Boolean showOnlySelectedChild Declaration public bool showOnlySelectedChild Field Value Type Description System.Boolean Properties AvailableRoot Declaration public static Transform AvailableRoot { get; } Property Value Type Description Transform Methods OpenWindow() Declaration public static void OpenWindow()"
  },
  "api/Lachee.Tools.Editor.EOLConversion.html": {
    "href": "api/Lachee.Tools.Editor.EOLConversion.html",
    "title": "Class EOLConversion | Utilities",
    "keywords": "Class EOLConversion Provides tools to convert line endings Inheritance System.Object EOLConversion Namespace : Lachee.Tools.Editor Assembly : cs.temp.dll.dll Syntax public class EOLConversion : UnityEditor.AssetModificationProcessor Fields PREFS_PREFERED Declaration public const string PREFS_PREFERED = \"prefered_eol\" Field Value Type Description System.String PREFS_PROCESS Declaration public const string PREFS_PROCESS = \"process_eol\" Field Value Type Description System.String Methods Convert(String) Converts all the assets and returns a list of files that were modified Declaration public static string[] Convert(string lineEnding) Parameters Type Name Description System.String lineEnding Returns Type Description System.String [] ConvertFile(String) Converts a single file's line ending Declaration public static bool ConvertFile(string path) Parameters Type Name Description System.String path Returns Type Description System.Boolean ConvertFile(String, String) Converts a single file's line ending Declaration public static bool ConvertFile(string path, string lineEnding) Parameters Type Name Description System.String path System.String lineEnding Returns Type Description System.Boolean OnWillCreateAsset(String) This gets called for every .meta file created by the Editor. Declaration public static void OnWillCreateAsset(string path) Parameters Type Name Description System.String path"
  },
  "api/Lachee.Tools.Editor.HelpContext.html": {
    "href": "api/Lachee.Tools.Editor.HelpContext.html",
    "title": "Class HelpContext | Utilities",
    "keywords": "Class HelpContext Inheritance System.Object HelpContext Namespace : Lachee.Tools.Editor Assembly : cs.temp.dll.dll Syntax public class HelpContext : UnityEditor.Editor Methods HelpContextMenu() Declaration public static void HelpContextMenu()"
  },
  "api/Lachee.Tools.Editor.html": {
    "href": "api/Lachee.Tools.Editor.html",
    "title": "Namespace Lachee.Tools.Editor | Utilities",
    "keywords": "Namespace Lachee.Tools.Editor Classes AssemblyDefinitionSolutionProcessor Fixes Unity generating incorrect solutions for Assembly Definitions. Solution provided by Unity Forums . BoneViewer Previews bones on a skinned mesh. Originally designed for VRChat Avatars, it will automatically select the first SkinnedMesh to preview. EOLConversion Provides tools to convert line endings HelpContext NamespaceConfiguration Automatic namespace configuration NamespaceEditor Handles context menus for the auto namespace NamespaceProcessor Processes C# scripts to add namespaces automatically Enums BoneViewer.BoneStyle"
  },
  "api/Lachee.Tools.Editor.NamespaceConfiguration.html": {
    "href": "api/Lachee.Tools.Editor.NamespaceConfiguration.html",
    "title": "Class NamespaceConfiguration | Utilities",
    "keywords": "Class NamespaceConfiguration Automatic namespace configuration Inheritance System.Object NamespaceConfiguration Namespace : Lachee.Tools.Editor Assembly : cs.temp.dll.dll Syntax public class NamespaceConfiguration : ScriptableObject Properties FormatDocument Format the documents with dotnet format after namespacing Declaration public bool FormatDocument { get; set; } Property Value Type Description System.Boolean IncludeSubDirectories Include subdirectories as sub-namespaces Declaration public bool IncludeSubDirectories { get; set; } Property Value Type Description System.Boolean IsAutomatic Indicates if files should automatically be namespaced Declaration public bool IsAutomatic { get; set; } Property Value Type Description System.Boolean RootNamespace The namespace to apply to all files under this configuration Declaration public string RootNamespace { get; set; } Property Value Type Description System.String Methods Reset() Declaration public void Reset()"
  },
  "api/Lachee.Tools.Editor.NamespaceEditor.html": {
    "href": "api/Lachee.Tools.Editor.NamespaceEditor.html",
    "title": "Class NamespaceEditor | Utilities",
    "keywords": "Class NamespaceEditor Handles context menus for the auto namespace Inheritance System.Object NamespaceEditor Namespace : Lachee.Tools.Editor Assembly : cs.temp.dll.dll Syntax public class NamespaceEditor : UnityEditor.Editor Methods CreateNamespaceConfiguration() Declaration public static void CreateNamespaceConfiguration()"
  },
  "api/Lachee.Tools.Editor.NamespaceProcessor.html": {
    "href": "api/Lachee.Tools.Editor.NamespaceProcessor.html",
    "title": "Class NamespaceProcessor | Utilities",
    "keywords": "Class NamespaceProcessor Processes C# scripts to add namespaces automatically Inheritance System.Object NamespaceProcessor Namespace : Lachee.Tools.Editor Assembly : cs.temp.dll.dll Syntax public class NamespaceProcessor : UnityEditor.AssetModificationProcessor Methods FormatScripts(IEnumerable<String>) Spawns a Dotnet process to format a list of assets Declaration public static void FormatScripts(IEnumerable<string> assets) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.String > assets FormatScripts(String[]) Declaration public static void FormatScripts(params string[] assets) Parameters Type Name Description System.String [] assets GetNamespace(String, out NamespaceConfiguration, String) Gets the best namespace for the given file. Declaration public static string GetNamespace(string filePath, out NamespaceConfiguration configuration, string excludePath = \"\") Parameters Type Name Description System.String filePath The path of the file NamespaceConfiguration configuration The configuration that was used to create the namespace. It will be null if it was created using other means. System.String excludePath Returns Type Description System.String GetRootNamespaceConfigurations() Maps the path of a namespace with the actual namespace Declaration public static IReadOnlyDictionary<string, NamespaceConfiguration> GetRootNamespaceConfigurations() Returns Type Description System.Collections.Generic.IReadOnlyDictionary < System.String , NamespaceConfiguration > OnWillCreateAsset(String) This gets called for every .meta file created by the Editor. Declaration public static void OnWillCreateAsset(string path) Parameters Type Name Description System.String path SetNamespace(String, String) Sets / Replaces the namespace of a given file Declaration public static void SetNamespace(string asset, string namespace) Parameters Type Name Description System.String asset System.String namespace"
  },
  "api/Lachee.Utilities.Circle.html": {
    "href": "api/Lachee.Utilities.Circle.html",
    "title": "Class Circle | Utilities",
    "keywords": "Class Circle Inheritance System.Object Circle Namespace : Lachee.Utilities Assembly : cs.temp.dll.dll Syntax public class Circle : MonoBehaviour Fields lineRenderer Current line renderer Declaration public LineRenderer lineRenderer Field Value Type Description LineRenderer Properties mode Declaration public Circle.Mode mode { get; set; } Property Value Type Description Circle.Mode offset Declaration public Vector3 offset { get; set; } Property Value Type Description Vector3 points Declaration public int points { get; set; } Property Value Type Description System.Int32 radius Declaration public float radius { get; set; } Property Value Type Description System.Single Methods UpdatePoints() Declaration public void UpdatePoints()"
  },
  "api/Lachee.Utilities.Circle.Mode.html": {
    "href": "api/Lachee.Utilities.Circle.Mode.html",
    "title": "Enum Circle.Mode | Utilities",
    "keywords": "Enum Circle.Mode Namespace : Lachee.Utilities Assembly : cs.temp.dll.dll Syntax public enum Mode Fields Name Description XY XZ ZY"
  },
  "api/Lachee.Utilities.ColorExtension.html": {
    "href": "api/Lachee.Utilities.ColorExtension.html",
    "title": "Class ColorExtension | Utilities",
    "keywords": "Class ColorExtension Extends Color Inheritance System.Object ColorExtension Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Lachee.Utilities Assembly : cs.temp.dll.dll Syntax public static class ColorExtension Methods PerceivedBrightness(Color) Declaration public static int PerceivedBrightness(this Color c) Parameters Type Name Description Color c Returns Type Description System.Int32 PerceivedBrightness(Color32) Declaration public static int PerceivedBrightness(this Color32 c) Parameters Type Name Description Color32 c Returns Type Description System.Int32 ToHex(Color, Char) Converts the colour into a RGBA hex with the given prefix Declaration public static string ToHex(this Color color, char prefix = '#') Parameters Type Name Description Color color System.Char prefix Returns Type Description System.String"
  },
  "api/Lachee.Utilities.Editor.BasicRistDrawer.html": {
    "href": "api/Lachee.Utilities.Editor.BasicRistDrawer.html",
    "title": "Class BasicRistDrawer | Utilities",
    "keywords": "Class BasicRistDrawer Basic extendable drawer for the Random List Inheritance System.Object BasicRistDrawer Implements IRistBoxLabelDrawer Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Lachee.Utilities.Editor Assembly : cs.temp.dll.dll Syntax public class BasicRistDrawer : IRistBoxLabelDrawer Methods DrawLabel(Rect, RandomListDrawerStyle, SerializedProperty, Single, Single, Boolean) Declaration public virtual void DrawLabel(Rect position, RandomListDrawerStyle style, SerializedProperty property, float weight, float percentage, bool isMini) Parameters Type Name Description Rect position RandomListDrawerStyle style SerializedProperty property System.Single weight System.Single percentage System.Boolean isMini GetLabel(RandomListDrawerStyle, SerializedProperty, Single, Single, Boolean) Declaration public static string GetLabel(RandomListDrawerStyle style, SerializedProperty property, float weight, float percentage, bool isMini) Parameters Type Name Description RandomListDrawerStyle style SerializedProperty property System.Single weight System.Single percentage System.Boolean isMini Returns Type Description System.String Implements IRistBoxLabelDrawer"
  },
  "api/Lachee.Utilities.Editor.html": {
    "href": "api/Lachee.Utilities.Editor.html",
    "title": "Namespace Lachee.Utilities.Editor | Utilities",
    "keywords": "Namespace Lachee.Utilities.Editor Classes BasicRistDrawer Basic extendable drawer for the Random List RandomListDrawer Handles drawing the Random List and its sliders sliders RandomListDrawerStyle Default styling used for the random list SerializedPropertyExtensions Interfaces IRistBoxLabelDrawer Interface used to draw labels on weight sliders"
  },
  "api/Lachee.Utilities.Editor.IRistBoxLabelDrawer.html": {
    "href": "api/Lachee.Utilities.Editor.IRistBoxLabelDrawer.html",
    "title": "Interface IRistBoxLabelDrawer | Utilities",
    "keywords": "Interface IRistBoxLabelDrawer Interface used to draw labels on weight sliders Namespace : Lachee.Utilities.Editor Assembly : cs.temp.dll.dll Syntax public interface IRistBoxLabelDrawer Methods DrawLabel(Rect, RandomListDrawerStyle, SerializedProperty, Single, Single, Boolean) Declaration void DrawLabel(Rect position, RandomListDrawerStyle style, SerializedProperty property, float weight, float percentage, bool isMini) Parameters Type Name Description Rect position RandomListDrawerStyle style SerializedProperty property System.Single weight System.Single percentage System.Boolean isMini"
  },
  "api/Lachee.Utilities.Editor.RandomListDrawer.html": {
    "href": "api/Lachee.Utilities.Editor.RandomListDrawer.html",
    "title": "Class RandomListDrawer | Utilities",
    "keywords": "Class RandomListDrawer Handles drawing the Random List and its sliders sliders Inheritance System.Object RandomListDrawer Namespace : Lachee.Utilities.Editor Assembly : cs.temp.dll.dll Syntax public sealed class RandomListDrawer : UnityEditor.PropertyDrawer Properties style Declaration public static RandomListDrawerStyle style { get; } Property Value Type Description RandomListDrawerStyle Methods GetPropertyHeight(SerializedProperty, GUIContent) Declaration public override float GetPropertyHeight(SerializedProperty property, GUIContent label) Parameters Type Name Description SerializedProperty property GUIContent label Returns Type Description System.Single OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label"
  },
  "api/Lachee.Utilities.Editor.RandomListDrawerStyle.html": {
    "href": "api/Lachee.Utilities.Editor.RandomListDrawerStyle.html",
    "title": "Class RandomListDrawerStyle | Utilities",
    "keywords": "Class RandomListDrawerStyle Default styling used for the random list Inheritance System.Object RandomListDrawerStyle Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Lachee.Utilities.Editor Assembly : cs.temp.dll.dll Syntax public class RandomListDrawerStyle Constructors RandomListDrawerStyle() Declaration public RandomListDrawerStyle() Fields Colors Declaration public readonly Color[] Colors Field Value Type Description Color [] listFooterBackground Declaration public readonly GUIStyle listFooterBackground Field Value Type Description GUIStyle listIconToolbarMinus Declaration public readonly GUIContent listIconToolbarMinus Field Value Type Description GUIContent listIconToolbarPlus Declaration public readonly GUIContent listIconToolbarPlus Field Value Type Description GUIContent listPreButton Declaration public readonly GUIStyle listPreButton Field Value Type Description GUIStyle sliderBG Declaration public readonly GUIStyle sliderBG Field Value Type Description GUIStyle sliderRange Declaration public readonly GUIStyle sliderRange Field Value Type Description GUIStyle sliderRangeSelected Declaration public readonly GUIStyle sliderRangeSelected Field Value Type Description GUIStyle sliderText Declaration public readonly GUIStyle sliderText Field Value Type Description GUIStyle Properties Drawers Dictionary lookup for custom drawers for the slider labels Declaration public Dictionary<Type, IRistBoxLabelDrawer> Drawers { get; set; } Property Value Type Description System.Collections.Generic.Dictionary < Type , IRistBoxLabelDrawer > ShowWeights Declaration public bool ShowWeights { get; set; } Property Value Type Description System.Boolean"
  },
  "api/Lachee.Utilities.Editor.SerializedPropertyExtensions.html": {
    "href": "api/Lachee.Utilities.Editor.SerializedPropertyExtensions.html",
    "title": "Class SerializedPropertyExtensions | Utilities",
    "keywords": "Class SerializedPropertyExtensions Inheritance System.Object SerializedPropertyExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Lachee.Utilities.Editor Assembly : cs.temp.dll.dll Syntax public static class SerializedPropertyExtensions Methods GetFieldInfoFromPath(Type, String, BindingFlags) Finds the field info for the given type at the given path. Declaration public static FieldInfo GetFieldInfoFromPath(this Type type, string path, BindingFlags flag = null) Parameters Type Name Description System.Type type System.String path BindingFlags flag Returns Type Description FieldInfo Remarks Does not work with arrays yet as they would return a PropertyInfo instead GetReadableName(SerializedProperty) Determines the best name for the given property Declaration public static string GetReadableName(this SerializedProperty property) Parameters Type Name Description SerializedProperty property Returns Type Description System.String GetSerializedFieldInfo(SerializedProperty) Gets the FieldInfo of the underlying field Declaration public static FieldInfo GetSerializedFieldInfo(this SerializedProperty property) Parameters Type Name Description SerializedProperty property The property to get the FieldInfo off Returns Type Description FieldInfo GetSerializedType(SerializedProperty) Gets the type of the underlying field the SerializedProperty is of. Declaration public static Type GetSerializedType(this SerializedProperty property) Parameters Type Name Description SerializedProperty property The property to get the type from Returns Type Description System.Type GetSerializedValue(SerializedProperty) Gets the underlying value this property represents Declaration public static object GetSerializedValue(this SerializedProperty property) Parameters Type Name Description SerializedProperty property Returns Type Description System.Object GetValueFromPath(Type, Object, String, BindingFlags) Gets the field values from the given path Declaration public static object GetValueFromPath(this Type type, object context, string path, BindingFlags flag = null) Parameters Type Name Description System.Type type The type of the root object System.Object context The root object to get the value from System.String path The SerializedProperty formatted path BindingFlags flag The flag used to search fields. Returns Type Description System.Object GetValueName(SerializedProperty) Gets the value of the property as a string Declaration public static string GetValueName(this SerializedProperty property) Parameters Type Name Description SerializedProperty property Returns Type Description System.String"
  },
  "api/Lachee.Utilities.EmphemeralSingleton-1.html": {
    "href": "api/Lachee.Utilities.EmphemeralSingleton-1.html",
    "title": "Class EmphemeralSingleton<T> | Utilities",
    "keywords": "Class EmphemeralSingleton<T> This class creates a Singleton GameObject that will either be lazily initialized when it is referenced for the first time or, grabbed from the scene if an instance already exists. Emphemeral Singletons are destroyed on load Inheritance System.Object Singleton <T> EmphemeralSingleton<T> Inherited Members Singleton<T>.type Singleton<T>.wait Singleton<T>.waitForReference Singleton<T>.logger Singleton<T>.instance Singleton<T>.available Singleton<T>.referenced Singleton<T>.exists Singleton<T>.OnApplicationQuit() Singleton<T>.Awake() Namespace : Lachee.Utilities Assembly : cs.temp.dll.dll Syntax public abstract class EmphemeralSingleton<T> : Singleton<T> where T : EmphemeralSingleton<T> Type Parameters Name Description T The class that is to inherit Singleton Remarks Singleton inherits a , so standard Unity functions apply. However, Awake and OnApplicationQuit have been overriden. Properties dontDestroyOnLoad Declaration protected override bool dontDestroyOnLoad { get; } Property Value Type Description System.Boolean Overrides Lachee.Utilities.Singleton<T>.dontDestroyOnLoad"
  },
  "api/Lachee.Utilities.GameObjectExtension.html": {
    "href": "api/Lachee.Utilities.GameObjectExtension.html",
    "title": "Class GameObjectExtension | Utilities",
    "keywords": "Class GameObjectExtension Extends GameObject functionality with a collection of utlities Inheritance System.Object GameObjectExtension Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Lachee.Utilities Assembly : cs.temp.dll.dll Syntax public static class GameObjectExtension Methods SetLayer(GameObject, Int32, LayerMask) Sets the layer of the game object Declaration public static bool SetLayer(this GameObject obj, int layer, LayerMask mask = null) Parameters Type Name Description GameObject obj The game object System.Int32 layer The new layer LayerMask mask Ignores the object if it doesn't match the mask Returns Type Description System.Boolean True if it matches and was updated SetLayerRecursive(GameObject, Int32, LayerMask, Boolean) Sets the layer of the game object and its children Declaration public static void SetLayerRecursive(this GameObject obj, int layer, LayerMask mask = null, bool exitEarly = false) Parameters Type Name Description GameObject obj The game object System.Int32 layer The new layer LayerMask mask Ignores the object if it doesn't match the mask System.Boolean exitEarly Stops recursion if the object doesn't match the mask"
  },
  "api/Lachee.Utilities.Gizmol.html": {
    "href": "api/Lachee.Utilities.Gizmol.html",
    "title": "Class Gizmol | Utilities",
    "keywords": "Class Gizmol Lachee's Gizmos Inheritance System.Object Gizmol Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Lachee.Utilities Assembly : cs.temp.dll.dll Syntax public static class Gizmol Methods DrawExclamation(Vector3, Single) Declaration public static void DrawExclamation(Vector3 position, float scale = 1F) Parameters Type Name Description Vector3 position System.Single scale Label(Vector3, String) Draws a Gizmos text at the given position Declaration public static void Label(Vector3 position, string text) Parameters Type Name Description Vector3 position System.String text Label(Vector3, String, Object[]) Declaration public static void Label(Vector3 position, string format, params object[] objects) Parameters Type Name Description Vector3 position System.String format System.Object [] objects"
  },
  "api/Lachee.Utilities.GLUtils.html": {
    "href": "api/Lachee.Utilities.GLUtils.html",
    "title": "Class GLUtils | Utilities",
    "keywords": "Class GLUtils Collection of tools to draw GL lines directly in the scene view Inheritance System.Object GLUtils Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Lachee.Utilities Assembly : cs.temp.dll.dll Syntax public static class GLUtils Fields transform Declaration public static Transform transform Field Value Type Description Transform Methods DrawBox(Color, Vector3, Vector2) Draws a box on the XY axis Declaration public static void DrawBox(Color color, Vector3 center, Vector2 size) Parameters Type Name Description Color color Vector3 center Vector2 size DrawBox(Material, Color, Vector3, Vector2) Draws a box on the XY axis Declaration public static void DrawBox(Material material, Color color, Vector3 center, Vector2 size) Parameters Type Name Description Material material Color color Vector3 center Vector2 size DrawCircle(Color, Vector3, Single, Int32) Draws a circle on the XY axis Declaration public static void DrawCircle(Color color, Vector3 center, float radius, int points = 16) Parameters Type Name Description Color color Vector3 center System.Single radius System.Int32 points DrawCircle(Material, Color, Vector3, Single, Int32) Draws a circle on the XY Axis Declaration public static void DrawCircle(Material material, Color color, Vector3 center, float radius, int points) Parameters Type Name Description Material material Color color Vector3 center System.Single radius System.Int32 points DrawLines(Color, Vector3[]) Declaration public static void DrawLines(Color color, params Vector3[] points) Parameters Type Name Description Color color Vector3 [] points DrawLines(Material, Color, Vector3[]) Declaration public static void DrawLines(Material material, Color color, params Vector3[] points) Parameters Type Name Description Material material Color color Vector3 [] points DrawTest(Transform, Color) Declaration public static void DrawTest(Transform root, Color color) Parameters Type Name Description Transform root Color color DrawTest(Transform, Material, Color) Declaration public static void DrawTest(Transform root, Material material, Color color) Parameters Type Name Description Transform root Material material Color color"
  },
  "api/Lachee.Utilities.html": {
    "href": "api/Lachee.Utilities.html",
    "title": "Namespace Lachee.Utilities | Utilities",
    "keywords": "Namespace Lachee.Utilities Classes Circle ColorExtension Extends Color EmphemeralSingleton<T> This class creates a Singleton GameObject that will either be lazily initialized when it is referenced for the first time or, grabbed from the scene if an instance already exists. Emphemeral Singletons are destroyed on load GameObjectExtension Extends GameObject functionality with a collection of utlities Gizmol Lachee's Gizmos GLUtils Collection of tools to draw GL lines directly in the scene view Instantiator<T> Lazy<T> Lazy fetching of components. The component will not be fetched wtih GetComponent until .Value is called for the first time. Linq LINQ for Lachee's. Provides a collection of LINQ and Enumeration related utilities Logger Custom Logger for Unity that handles parenting and hierarchy of logs Mathl Wet Maths a.k.a MathLake MathLachee, or MathLoony... however you want it. Bunch of static maths functions that are useful, like Cyclic Modulo MeshBuilder The MeshBuilder allows for easier manipulation and creation of meshes. This used to be called the MeshDetails ParticleSystemExtension Extends Particle Systems RandomList<T> A randomised list. It will store a collection of values with specified weights and provide functionallity to select randomly from the list. RandomListInt<T> A randomised list. It will store a collection of values with specified weights and provide functionallity to select randomly from the list. RectTransformExtension Extends RectRectangle Singleton<T> This class creates a Singleton GameObject that will either be lazily initialized when it is referenced for the first time or, grabbed from the scene if an instance already exists. SortedGizmos SpriteExtensions Extends sprites TransformExtension Extends Transform Interfaces IRandomList<T, K> Enums Circle.Mode"
  },
  "api/Lachee.Utilities.Instantiator-1.html": {
    "href": "api/Lachee.Utilities.Instantiator-1.html",
    "title": "Class Instantiator<T> | Utilities",
    "keywords": "Class Instantiator<T> Inheritance System.Object Instantiator<T> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Lachee.Utilities Assembly : cs.temp.dll.dll Syntax public class Instantiator<T> where T : Object Type Parameters Name Description T Constructors Instantiator(GameObject, Func<GameObject, T>) Declaration public Instantiator(GameObject prefab, Func<GameObject, T> callback) Parameters Type Name Description GameObject prefab System.Func < GameObject , T> callback Properties localPosition Declaration public Vector3 localPosition { get; set; } Property Value Type Description Vector3 parent Declaration public Transform parent { get; set; } Property Value Type Description Transform prefab Declaration public GameObject prefab { get; } Property Value Type Description GameObject Methods Instantiate() Spawns the object and returns the result of the post event Declaration public T Instantiate() Returns Type Description T"
  },
  "api/Lachee.Utilities.IRandomList-2.html": {
    "href": "api/Lachee.Utilities.IRandomList-2.html",
    "title": "Interface IRandomList<T, K> | Utilities",
    "keywords": "Interface IRandomList<T, K> Namespace : Lachee.Utilities Assembly : cs.temp.dll.dll Syntax public interface IRandomList<T, K> where K : IComparable<K> Type Parameters Name Description T K Properties Count Declaration int Count { get; } Property Value Type Description System.Int32 TotalWeight Declaration K TotalWeight { get; } Property Value Type Description K Methods Add(T, K) Declaration void Add(T item, K weight) Parameters Type Name Description T item K weight Clear() Declaration void Clear() GetWeight(T) Declaration K GetWeight(T item) Parameters Type Name Description T item Returns Type Description K Randomise(Single, out T) Declaration bool Randomise(float random, out T result) Parameters Type Name Description System.Single random T result Returns Type Description System.Boolean Remove(T) Declaration void Remove(T item) Parameters Type Name Description T item SetWeight(T, K) Declaration bool SetWeight(T item, K weight) Parameters Type Name Description T item K weight Returns Type Description System.Boolean TryGetWeight(T, out K) Declaration bool TryGetWeight(T item, out K weight) Parameters Type Name Description T item K weight Returns Type Description System.Boolean"
  },
  "api/Lachee.Utilities.Lazy-1.html": {
    "href": "api/Lachee.Utilities.Lazy-1.html",
    "title": "Class Lazy<T> | Utilities",
    "keywords": "Class Lazy<T> Lazy fetching of components. The component will not be fetched wtih GetComponent until .Value is called for the first time. Inheritance System.Object Lazy<T> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Lachee.Utilities Assembly : cs.temp.dll.dll Syntax [Obsolete(\"Use Auto Attributes now\")] public class Lazy<T> where T : Component Type Parameters Name Description T Component to fetch Constructors Lazy(Component) Declaration public Lazy(Component parent) Parameters Type Name Description Component parent Properties Value Declaration public T Value { get; set; } Property Value Type Description T"
  },
  "api/Lachee.Utilities.Linq.html": {
    "href": "api/Lachee.Utilities.Linq.html",
    "title": "Class Linq | Utilities",
    "keywords": "Class Linq LINQ for Lachee's. Provides a collection of LINQ and Enumeration related utilities Inheritance System.Object Linq Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Lachee.Utilities Assembly : cs.temp.dll.dll Syntax public static class Linq Methods AddRange<T>(HashSet<T>, IEnumerable<T>) Adds a range to the HashSet. Duplicates are ignored. Declaration public static void AddRange<T>(this HashSet<T> hashSet, IEnumerable<T> items) Parameters Type Name Description HashSet <T> hashSet System.Collections.Generic.IEnumerable <T> items Enumerable list of items Type Parameters Name Description T AsEnumerable<T>(ArraySegment<T>) Creates an enumeration of the array segment from the offset to the count Declaration public static IEnumerable<T> AsEnumerable<T>(this ArraySegment<T> arraySegment) Parameters Type Name Description ArraySegment <T> arraySegment Returns Type Description System.Collections.Generic.IEnumerable <T> Type Parameters Name Description T Cut<T>(T[], Int32, Int32) Segments and the copies the segmented data into the new array Declaration public static T[] Cut<T>(this T[] array, int from, int count) Parameters Type Name Description T[] array System.Int32 from System.Int32 count Returns Type Description T[] Type Parameters Name Description T GetSegment<T>(T[]) Creates a segment from the array Declaration public static ArraySegment<T> GetSegment<T>(this T[] array) Parameters Type Name Description T[] array Returns Type Description ArraySegment <T> Type Parameters Name Description T GetSegment<T>(T[], Int32) Creates a segment from the array Declaration public static ArraySegment<T> GetSegment<T>(this T[] array, int from) Parameters Type Name Description T[] array System.Int32 from Returns Type Description ArraySegment <T> Type Parameters Name Description T GetSegment<T>(T[], Int32, Int32) Creates a segment from the array Declaration public static ArraySegment<T> GetSegment<T>(this T[] array, int from, int count) Parameters Type Name Description T[] array System.Int32 from System.Int32 count Returns Type Description ArraySegment <T> Type Parameters Name Description T IndexOf<T>(IEnumerable<T>, T) Searches for the specified object and returns the zero-based index of the first occurrence within the entire enumeration Declaration public static int IndexOf<T>(this IEnumerable<T> arr, T item) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> arr T item The item to search for Returns Type Description System.Int32 The index. If none is found then -1. Type Parameters Name Description T Remarks The enumerable is searched forward starting at the first item. The System.Object.Equals(System.Object) is used to validate equality IndexOf<T>(IEnumerable<T>, T, Int32) Searches for the specified object and returns the zero-based index of the first occurrence within the entire enumeration Declaration public static int IndexOf<T>(this IEnumerable<T> arr, T item, int index) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> arr T item The item to search for System.Int32 index The zero-based starting index of the search. 0 (zero) is valid in an empty list. Returns Type Description System.Int32 The index. If none is found then -1. Type Parameters Name Description T Remarks The enumerable is searched forward starting at the first item. The System.Object.Equals(System.Object) is used to validate equality IndexOf<T>(IEnumerable<T>, T, Int32, Int32) Searches for the specified object and returns the zero-based index of the first occurrence within the entire enumeration Declaration public static int IndexOf<T>(this IEnumerable<T> arr, T item, int index, int count) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> arr T item The item to search for System.Int32 index The zero-based starting index of the search. 0 (zero) is valid in an empty list. System.Int32 count The number of elements in the section to search. Returns Type Description System.Int32 The index. If none is found then -1. Type Parameters Name Description T Remarks The enumerable is searched forward starting at the first item. The System.Object.Equals(System.Object) is used to validate equality IndexOf<T>(IEnumerable<T>, Predicate<T>) Searches untill the predicate is true and returns the zero-based index of the first occurrence within the entire enumeration Declaration public static int IndexOf<T>(this IEnumerable<T> arr, Predicate<T> predicate) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> arr System.Predicate <T> predicate Method invoked for each item to check for equality Returns Type Description System.Int32 The index. If none is found then -1. Type Parameters Name Description T Remarks The enumerable is searched forward starting at the first item. IndexOf<T>(IEnumerable<T>, Predicate<T>, Int32) Searches untill the predicate is true and returns the zero-based index of the first occurrence within the entire enumeration Declaration public static int IndexOf<T>(this IEnumerable<T> arr, Predicate<T> predicate, int index) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> arr System.Predicate <T> predicate Method invoked for each item to check for equality System.Int32 index The zero-based starting index of the search. 0 (zero) is valid in an empty list. Returns Type Description System.Int32 The index. If none is found then -1. Type Parameters Name Description T Remarks The enumerable is searched forward starting at the first item. IndexOf<T>(IEnumerable<T>, Predicate<T>, Int32, Int32) Searches untill the predicate is true and returns the zero-based index of the first occurrence within the entire enumeration Declaration public static int IndexOf<T>(this IEnumerable<T> arr, Predicate<T> predicate, int index, int count) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> arr System.Predicate <T> predicate Method invoked for each item to check for equality System.Int32 index The zero-based starting index of the search. 0 (zero) is valid in an empty list. System.Int32 count The number of elements in the section to search. Returns Type Description System.Int32 The index. If none is found then -1. Type Parameters Name Description T Remarks The enumerable is searched forward starting at the first item. IndexOf<T>(IEnumerable<T>, Predicate<T>, Int32, Int32, out T) Searches untill the predicate is true and returns the zero-based index of the first occurrence within the entire enumeration Declaration public static int IndexOf<T>(this IEnumerable<T> arr, Predicate<T> predicate, int index, int count, out T item) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> arr System.Predicate <T> predicate Method invoked for each item to check for equality System.Int32 index The zero-based starting index of the search. 0 (zero) is valid in an empty list. System.Int32 count The number of elements in the section to search. T item The item that is at the given index Returns Type Description System.Int32 The index. If none is found then -1. Type Parameters Name Description T Remarks The enumerable is searched forward starting at the first item. Random<TSource>(IEnumerable<TSource>, Int32) Picks a random item from the enumerator by enumerating over a random amount. Do not use this on fixed length arrays or lists, as it is less efficient than a direct lookup. This isn't perfect, and using a flat lookup will have a more distributed random, but this is a useful utility regardless. For more evenly distributed random selection of items, use a Rist Declaration public static TSource Random<TSource>(this IEnumerable<TSource> source, int upperBounds = 2147483647) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The source enumerable System.Int32 upperBounds The maximum length the enumeration can be. For an accurate random, this has to be >= length of source. Returns Type Description TSource A random item Type Parameters Name Description TSource Shuffle<T>(T[]) Shuffles the array in place Declaration public static T[] Shuffle<T>(this T[] src) Parameters Type Name Description T[] src Returns Type Description T[] Type Parameters Name Description T Remarks The list will be updated Shuffle<T>(List<T>) Shuffles the list in place Declaration public static List<T> Shuffle<T>(this List<T> src) Parameters Type Name Description System.Collections.Generic.List <T> src Returns Type Description System.Collections.Generic.List <T> Type Parameters Name Description T Remarks The list will be updated ToArray<T>(ArraySegment<T>) Copies the array segment into a new array Declaration public static T[] ToArray<T>(this ArraySegment<T> arraySegment) Parameters Type Name Description ArraySegment <T> arraySegment Returns Type Description T[] Type Parameters Name Description T"
  },
  "api/Lachee.Utilities.Logger.html": {
    "href": "api/Lachee.Utilities.Logger.html",
    "title": "Class Logger | Utilities",
    "keywords": "Class Logger Custom Logger for Unity that handles parenting and hierarchy of logs Inheritance System.Object Logger Namespace : Lachee.Utilities Assembly : cs.temp.dll.dll Syntax public class Logger : ILogHandler Constructors Logger(Logger, String) Declaration public Logger(Logger parent, string tag) Parameters Type Name Description Logger parent System.String tag Logger(String) Declaration public Logger(string tag) Parameters Type Name Description System.String tag Properties Parent Declaration public Logger Parent { get; } Property Value Type Description Logger Tag Declaration public string Tag { get; } Property Value Type Description System.String Methods Error(Object) Declaration public void Error(object message) Parameters Type Name Description System.Object message Error(Object, UnityEngine.Object) Declaration public void Error(object message, UnityEngine.Object context) Parameters Type Name Description System.Object message UnityEngine.Object context Error(String, Object[]) Declaration public void Error(string format, params object[] args) Parameters Type Name Description System.String format System.Object [] args Error(String, UnityEngine.Object, Object[]) Declaration public void Error(string format, UnityEngine.Object context, params object[] args) Parameters Type Name Description System.String format UnityEngine.Object context System.Object [] args Info(Object) Declaration public void Info(object message) Parameters Type Name Description System.Object message Info(Object, UnityEngine.Object) Declaration public void Info(object message, UnityEngine.Object context) Parameters Type Name Description System.Object message UnityEngine.Object context Info(String, Object[]) Declaration public void Info(string format, params object[] args) Parameters Type Name Description System.String format System.Object [] args Info(String, UnityEngine.Object, Object[]) Declaration public void Info(string format, UnityEngine.Object context, params object[] args) Parameters Type Name Description System.String format UnityEngine.Object context System.Object [] args LogException(Exception, UnityEngine.Object) Declaration public void LogException(Exception exception, UnityEngine.Object context) Parameters Type Name Description Exception exception UnityEngine.Object context LogFormat(LogType, UnityEngine.Object, String, Object[]) Declaration public void LogFormat(LogType logType, UnityEngine.Object context, string format, params object[] args) Parameters Type Name Description LogType logType UnityEngine.Object context System.String format System.Object [] args Warning(Object) Declaration public void Warning(object message) Parameters Type Name Description System.Object message Warning(Object, UnityEngine.Object) Declaration public void Warning(object message, UnityEngine.Object context) Parameters Type Name Description System.Object message UnityEngine.Object context Warning(String, Object[]) Declaration public void Warning(string format, params object[] args) Parameters Type Name Description System.String format System.Object [] args Warning(String, UnityEngine.Object, Object[]) Declaration public void Warning(string format, UnityEngine.Object context, params object[] args) Parameters Type Name Description System.String format UnityEngine.Object context System.Object [] args"
  },
  "api/Lachee.Utilities.Mathl.html": {
    "href": "api/Lachee.Utilities.Mathl.html",
    "title": "Class Mathl | Utilities",
    "keywords": "Class Mathl Wet Maths a.k.a MathLake MathLachee, or MathLoony... however you want it. Bunch of static maths functions that are useful, like Cyclic Modulo Inheritance System.Object Mathl Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Lachee.Utilities Assembly : cs.temp.dll.dll Syntax public static class Mathl Methods BitsSet(Int32) Counts the number of bits set in the bitflag. Declaration public static int BitsSet(int i) Parameters Type Name Description System.Int32 i The bitflag Returns Type Description System.Int32 Extrude(Vector3, Vector3, Single) Extrudes the vector a distance away from the center Declaration public static Vector3 Extrude(this Vector3 vector, Vector3 center, float distance) Parameters Type Name Description Vector3 vector The starting vector Vector3 center The center to extrude away from System.Single distance The distance to exture Returns Type Description Vector3 Map(Single, Single, Single, Single, Single) Maps a value from it a range to a new range Declaration public static float Map(float value, float fromMin, float fromMax, float toMin, float toMax) Parameters Type Name Description System.Single value the value to map System.Single fromMin the minimum the value can be System.Single fromMax the maximum the value can be System.Single toMin the value minimum gets mapped into System.Single toMax the value maximum gets mapped into Returns Type Description System.Single value mapped from toMin to toMax Mod(Int32, Int32) Cyclic modulo Thanks SaroVati :3 Declaration public static int Mod(int x, int m) Parameters Type Name Description System.Int32 x System.Int32 m Returns Type Description System.Int32 Overlaps(Rect, Rect, out Rect) Returns true if the other rectangle overlaps this rectangle. Declaration public static bool Overlaps(this Rect self, Rect other, out Rect overlap) Parameters Type Name Description Rect self Rect other Rect overlap The inner overlap rectangle Returns Type Description System.Boolean"
  },
  "api/Lachee.Utilities.MeshBuilder.html": {
    "href": "api/Lachee.Utilities.MeshBuilder.html",
    "title": "Class MeshBuilder | Utilities",
    "keywords": "Class MeshBuilder The MeshBuilder allows for easier manipulation and creation of meshes. This used to be called the MeshDetails Inheritance System.Object MeshBuilder Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Lachee.Utilities Assembly : cs.temp.dll.dll Syntax public class MeshBuilder Constructors MeshBuilder() Declaration public MeshBuilder() MeshBuilder(MeshBuilder, MeshBuilder) Declaration public MeshBuilder(MeshBuilder a, MeshBuilder b) Parameters Type Name Description MeshBuilder a MeshBuilder b MeshBuilder(Mesh) Declaration public MeshBuilder(Mesh m) Parameters Type Name Description Mesh m MeshBuilder(Int32, Int32) Declaration public MeshBuilder(int vertexCount, int triangleCount) Parameters Type Name Description System.Int32 vertexCount System.Int32 triangleCount Properties submeshCount Declaration public int submeshCount { get; } Property Value Type Description System.Int32 Methods AddColor(Color) Declaration public void AddColor(Color c) Parameters Type Name Description Color c AddRectangle(Vector3, Vector3, Vector3, Vector3) Creates a rectangle from the given points. Automatically uses correct faces. Declaration public void AddRectangle(Vector3 a, Vector3 b, Vector3 c, Vector3 d) Parameters Type Name Description Vector3 a Vector3 b Vector3 c Vector3 d AddTri(Int32, Int32) Declaration public void AddTri(int a, int s = 0) Parameters Type Name Description System.Int32 a System.Int32 s AddTriangle(Vector3, Vector3, Vector3) Declaration public void AddTriangle(Vector3 a, Vector3 b, Vector3 c) Parameters Type Name Description Vector3 a Vector3 b Vector3 c AddTris(Int32, Int32, Int32, Int32) Declaration public void AddTris(int a, int b, int c, int s = 0) Parameters Type Name Description System.Int32 a System.Int32 b System.Int32 c System.Int32 s AddUV(Vector2) Declaration public void AddUV(Vector2 uv) Parameters Type Name Description Vector2 uv AddUV(Vector2[]) Declaration public void AddUV(params Vector2[] uvs) Parameters Type Name Description Vector2 [] uvs AddVert(Vector2, Single) Declaration public void AddVert(Vector2 v, float z = 0F) Parameters Type Name Description Vector2 v System.Single z AddVert(Vector3) Declaration public void AddVert(Vector3 v) Parameters Type Name Description Vector3 v AddVert(Vector3[]) Declaration public void AddVert(params Vector3[] vectors) Parameters Type Name Description Vector3 [] vectors Apply(Mesh, Boolean) Declaration public void Apply(Mesh mesh, bool useSubmesh = false) Parameters Type Name Description Mesh mesh System.Boolean useSubmesh CalculateCenter() Declaration public Vector3 CalculateCenter() Returns Type Description Vector3 CenterMesh(Vector3) Moves the center of the mesh to the position. Moving the verts appropriately Declaration public void CenterMesh(Vector3 position) Parameters Type Name Description Vector3 position The position to center around Clear() Declaration public void Clear() CountColors() Declaration public int CountColors() Returns Type Description System.Int32 CountTris() Declaration public int CountTris() Returns Type Description System.Int32 CountUVs() Declaration public int CountUVs() Returns Type Description System.Int32 CountVerts() Declaration public int CountVerts() Returns Type Description System.Int32 Create(String, Boolean, Boolean) Declaration public Mesh Create(string name = \"Generic Mesh\", bool useSubmesh = false, bool isDynamic = false) Parameters Type Name Description System.String name System.Boolean useSubmesh System.Boolean isDynamic Returns Type Description Mesh CreateQuad() Declaration public void CreateQuad() CreateTriangle() Declaration public void CreateTriangle() CreateTriangle(Int32, Int32, Int32) Declaration public void CreateTriangle(int a, int b, int c) Parameters Type Name Description System.Int32 a System.Int32 b System.Int32 c GetCenter() Declaration public Vector3 GetCenter() Returns Type Description Vector3 GetColor(Int32) Declaration public Color GetColor(int i) Parameters Type Name Description System.Int32 i Returns Type Description Color GetTri(Int32) Declaration public int GetTri(int i) Parameters Type Name Description System.Int32 i Returns Type Description System.Int32 GetTris(Int32) Declaration public int[] GetTris(int i) Parameters Type Name Description System.Int32 i Returns Type Description System.Int32 [] GetUV(Int32) Declaration public Vector2 GetUV(int i) Parameters Type Name Description System.Int32 i Returns Type Description Vector2 GetVert(Int32) Declaration public Vector3 GetVert(int i) Parameters Type Name Description System.Int32 i Returns Type Description Vector3 GetVerts(Int32[]) Declaration public Vector3[] GetVerts(int[] tris) Parameters Type Name Description System.Int32 [] tris Returns Type Description Vector3 [] Merge(MeshBuilder, MeshBuilder) Merges 2 MeshDetails together with each one acting as a seperate submesh Declaration public static Mesh Merge(MeshBuilder a, MeshBuilder b) Parameters Type Name Description MeshBuilder a MeshBuilder b Returns Type Description Mesh SetColor(Color) Declaration public void SetColor(Color c) Parameters Type Name Description Color c SetColors(IEnumerable<Color>) Declaration public void SetColors(IEnumerable<Color> colors) Parameters Type Name Description System.Collections.Generic.IEnumerable < Color > colors SetTris(IEnumerable<Int32>, Int32) Declaration public void SetTris(IEnumerable<int> polyTris, int s = 0) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Int32 > polyTris System.Int32 s SetUVs(IEnumerable<Vector2>) Declaration public void SetUVs(IEnumerable<Vector2> uvs) Parameters Type Name Description System.Collections.Generic.IEnumerable < Vector2 > uvs SetVerts(IEnumerable<Vector3>) Declaration public void SetVerts(IEnumerable<Vector3> verts) Parameters Type Name Description System.Collections.Generic.IEnumerable < Vector3 > verts Operators Addition(MeshBuilder, MeshBuilder) Declaration public static MeshBuilder operator +(MeshBuilder a, MeshBuilder b) Parameters Type Name Description MeshBuilder a MeshBuilder b Returns Type Description MeshBuilder"
  },
  "api/Lachee.Utilities.ParticleSystemExtension.html": {
    "href": "api/Lachee.Utilities.ParticleSystemExtension.html",
    "title": "Class ParticleSystemExtension | Utilities",
    "keywords": "Class ParticleSystemExtension Extends Particle Systems Inheritance System.Object ParticleSystemExtension Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Lachee.Utilities Assembly : cs.temp.dll.dll Syntax public static class ParticleSystemExtension Methods SetMaxParticles(ParticleSystem, Int32) Sets the max number of particles Declaration public static void SetMaxParticles(this ParticleSystem system, int count) Parameters Type Name Description ParticleSystem system System.Int32 count"
  },
  "api/Lachee.Utilities.RandomList-1.html": {
    "href": "api/Lachee.Utilities.RandomList-1.html",
    "title": "Class RandomList<T> | Utilities",
    "keywords": "Class RandomList<T> A randomised list. It will store a collection of values with specified weights and provide functionallity to select randomly from the list. Inheritance System.Object RandomList<T> Implements System.Collections.Generic.IEnumerable <T> System.Collections.IEnumerable IRandomList <T, System.Single > Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Lachee.Utilities Assembly : cs.temp.dll.dll Syntax [Serializable] public class RandomList<T> : IEnumerable<T>, IEnumerable, IRandomList<T, float> Type Parameters Name Description T Type to store as the value. Constructors RandomList() Creates a new Random List Declaration public RandomList() RandomList(IEnumerable<KeyValuePair<T, Single>>) Declaration public RandomList(IEnumerable<KeyValuePair<T, float>> collection) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Collections.Generic.KeyValuePair <T, System.Single >> collection RandomList(Int32) Creates a new Random List with a set capacity. Declaration public RandomList(int capacity) Parameters Type Name Description System.Int32 capacity Properties Count Number of elements currently in the table. Declaration public int Count { get; } Property Value Type Description System.Int32 TotalWeight The total tally of the weights. Declaration public float TotalWeight { get; } Property Value Type Description System.Single Methods Add(T, Single) Adds a new item with a specified weight to the table and increments the total weight. Declaration public void Add(T item, float weight = 1F) Parameters Type Name Description T item Item to add System.Single weight Non-negative weight this item has Add(RandomList<T>) Declaration public void Add(RandomList<T> other) Parameters Type Name Description RandomList <T> other Add(KeyValuePair<T, Single>) Adds a new key value pair Declaration public void Add(KeyValuePair<T, float> pair) Parameters Type Name Description System.Collections.Generic.KeyValuePair <T, System.Single > pair Clear() Clears the random table. Declaration public void Clear() GetEnumerator() Gets a enumerator of items in the Rist. Does not apply the random function too it. Declaration public IEnumerator<T> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator <T> GetWeight(T) Gets the weight of a specific item Declaration public float GetWeight(T item) Parameters Type Name Description T item Returns Type Description System.Single Randomise(Single, out T) Attempts to pick a random element from the table based of weighting. Declaration public bool Randomise(float random, out T result) Parameters Type Name Description System.Single random A random value between 0 and 1. This is done so System.Random or Unity.Random can be used. T result The random element that was fetched. Returns Type Description System.Boolean false if we are unable to find a random element. RecalculateWeights() Recalculates the total weights Declaration protected float RecalculateWeights() Returns Type Description System.Single Remove(T) Removes an item and its weight Declaration public void Remove(T item) Parameters Type Name Description T item The item to remove SetWeight(T, Single) Updates the weight of a specific item Declaration public bool SetWeight(T item, float weight) Parameters Type Name Description T item The item to update System.Single weight Weight of the item Returns Type Description System.Boolean If the item exists and was updated TryGetWeight(T, out Single) Tries to get the weight of a specific item Declaration public bool TryGetWeight(T item, out float weight) Parameters Type Name Description T item System.Single weight Returns Type Description System.Boolean Explicit Interface Implementations IEnumerable.GetEnumerator() Gets a enumerator of items in the Rist. Does not apply the random function too it. Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable IRandomList<T, K>"
  },
  "api/Lachee.Utilities.RandomListInt-1.html": {
    "href": "api/Lachee.Utilities.RandomListInt-1.html",
    "title": "Class RandomListInt<T> | Utilities",
    "keywords": "Class RandomListInt<T> A randomised list. It will store a collection of values with specified weights and provide functionallity to select randomly from the list. Inheritance System.Object RandomListInt<T> Implements System.Collections.Generic.IEnumerable <T> System.Collections.IEnumerable IRandomList <T, System.Int32 > Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Lachee.Utilities Assembly : cs.temp.dll.dll Syntax [Serializable] public class RandomListInt<T> : IEnumerable<T>, IEnumerable, IRandomList<T, int> Type Parameters Name Description T Type to store as the value. Constructors RandomListInt() Creates a new Random List Declaration public RandomListInt() RandomListInt(RandomListInt<T>) Declaration public RandomListInt(RandomListInt<T> other) Parameters Type Name Description RandomListInt <T> other RandomListInt(IEnumerable<KeyValuePair<T, Int32>>) Declaration public RandomListInt(IEnumerable<KeyValuePair<T, int>> collection) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Collections.Generic.KeyValuePair <T, System.Int32 >> collection RandomListInt(Int32) Creates a new Random List with a set capacity. Declaration public RandomListInt(int capacity) Parameters Type Name Description System.Int32 capacity Properties Count Number of elements currently in the table. Declaration public int Count { get; } Property Value Type Description System.Int32 TotalWeight The total tally of the weights. Declaration public int TotalWeight { get; } Property Value Type Description System.Int32 WithReplacement If false, then the weight will slowly decrement with every random, eventually landing on zero. Declaration public bool WithReplacement { get; set; } Property Value Type Description System.Boolean Methods Add(T, Int32) Adds a new item with a specified weight to the table and increments the total weight. Declaration public void Add(T item, int weight = 1) Parameters Type Name Description T item Item to add System.Int32 weight Non-negative weight this item has Add(RandomListInt<T>) Declaration public void Add(RandomListInt<T> other) Parameters Type Name Description RandomListInt <T> other Add(KeyValuePair<T, Int32>) Adds a new key value pair Declaration public void Add(KeyValuePair<T, int> pair) Parameters Type Name Description System.Collections.Generic.KeyValuePair <T, System.Int32 > pair Clear() Clears the random table. Declaration public void Clear() GetEnumerator() Gets a enumerator of items in the Rist. Does not apply the random function too it. Declaration public IEnumerator<T> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator <T> GetWeight(T) Gets the weight of a specific item Declaration public int GetWeight(T item) Parameters Type Name Description T item Returns Type Description System.Int32 Randomise(Single, out T) Attempts to pick a random element from the table based of weighting. Declaration public bool Randomise(float random, out T result) Parameters Type Name Description System.Single random A random value between 0 and 1. This is done so System.Random or Unity.Random can be used. T result The random element that was fetched. Returns Type Description System.Boolean false if we are unable to find a random element. RecalculateWeights() Recalculates the total weights Declaration protected int RecalculateWeights() Returns Type Description System.Int32 Remove(T) Removes an item and its weight Declaration public void Remove(T item) Parameters Type Name Description T item The item to remove SetWeight(T, Int32) Updates the weight of a specific item Declaration public bool SetWeight(T item, int weight) Parameters Type Name Description T item The item to update System.Int32 weight Weight of the item Returns Type Description System.Boolean If the item exists and was updated TryGetWeight(T, out Int32) Tries to get the weight of a specific item Declaration public bool TryGetWeight(T item, out int weight) Parameters Type Name Description T item System.Int32 weight Returns Type Description System.Boolean Explicit Interface Implementations IEnumerable.GetEnumerator() Gets a enumerator of items in the Rist. Does not apply the random function too it. Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable IRandomList<T, K>"
  },
  "api/Lachee.Utilities.RectTransformExtension.html": {
    "href": "api/Lachee.Utilities.RectTransformExtension.html",
    "title": "Class RectTransformExtension | Utilities",
    "keywords": "Class RectTransformExtension Extends RectRectangle Inheritance System.Object RectTransformExtension Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Lachee.Utilities Assembly : cs.temp.dll.dll Syntax public static class RectTransformExtension Methods SetBottom(RectTransform, Single) Declaration public static RectTransform SetBottom(this RectTransform rt, float bottom) Parameters Type Name Description RectTransform rt System.Single bottom Returns Type Description RectTransform SetLeft(RectTransform, Single) Declaration public static RectTransform SetLeft(this RectTransform rt, float left) Parameters Type Name Description RectTransform rt System.Single left Returns Type Description RectTransform SetRight(RectTransform, Single) Declaration public static RectTransform SetRight(this RectTransform rt, float right) Parameters Type Name Description RectTransform rt System.Single right Returns Type Description RectTransform SetTop(RectTransform, Single) Declaration public static RectTransform SetTop(this RectTransform rt, float top) Parameters Type Name Description RectTransform rt System.Single top Returns Type Description RectTransform ToScreenSpace(RectTransform) Converts this rect transform to screen space Declaration public static Rect ToScreenSpace(this RectTransform transform) Parameters Type Name Description RectTransform transform Returns Type Description Rect"
  },
  "api/Lachee.Utilities.Singleton-1.html": {
    "href": "api/Lachee.Utilities.Singleton-1.html",
    "title": "Class Singleton<T> | Utilities",
    "keywords": "Class Singleton<T> This class creates a Singleton GameObject that will either be lazily initialized when it is referenced for the first time or, grabbed from the scene if an instance already exists. Inheritance System.Object Singleton<T> EmphemeralSingleton <T> Namespace : Lachee.Utilities Assembly : cs.temp.dll.dll Syntax public abstract class Singleton<T> : MonoBehaviour where T : Singleton<T> Type Parameters Name Description T The class that is to inherit Singleton Remarks Singleton inherits a , so standard Unity functions apply. However, Awake and OnApplicationQuit have been overriden. This object will not be destroyed on load by default. To override this behaviour, either use EmphemeralSingleton<T> or override dontDestroyOnLoad . Examples This shows how to increment an integer. public class GameManager : Singleton<GameManager> { } Fields logger The current logger Declaration public static readonly Logger logger Field Value Type Description Logger wait Waits for the singleton to be available in the scene. Declaration public static readonly WaitWhile wait Field Value Type Description WaitWhile See Also available waitForReference Waits for the singleton to be referenced. Declaration public static readonly WaitWhile waitForReference Field Value Type Description WaitWhile See Also referenced Properties available The singleton instance of the type. Similar to instance , however null will be returned if the instance does not exist instead of trying to create a new gameobject. It will still try to find the gameobject in the scene. Declaration public static T available { get; } Property Value Type Description T dontDestroyOnLoad Don't destroy the singleton on load. Declaration protected virtual bool dontDestroyOnLoad { get; } Property Value Type Description System.Boolean Remarks By default, this is set to true. Disabling this allows for scene-specific singletons exists Does an instance of this singleton exist in the world? Use this to check the validity of the instance before creating one. Short hand for available != null. See also available for a nullable instance that does not create any objects. Declaration [Obsolete(\"Use available or referenced instead\", true)] public static bool exists { get; } Property Value Type Description System.Boolean instance The singleton instance of the type. Will create a new object with type if it is not available within the scene. Declaration public static T instance { get; set; } Property Value Type Description T referenced Has the instance been assigned / referenced? Will calling instance or available call a FindObjectOfType? Use this to check the validity of the instance before creating one or even locating one. See also available for a nullable instance that does not create any objects. Declaration public static bool referenced { get; } Property Value Type Description System.Boolean type The current type that belongs to this singleton. Alias of typeof(T) . Declaration public static Type type { get; } Property Value Type Description System.Type Methods Awake() Called when the object is first initialized in the scene. Singleton overrides this to ensure the object does not get destroyed on Load. Declaration protected virtual void Awake() OnApplicationQuit() When Unity quits, it destroys objects in a random order. In principle, a Singleton is only destroyed when application quits. If any script calls instance after it have been destroyed, it will create a buggy ghost object that will stay on the Editor scene when the player stops. This override prevents this from happening and must be called. Declaration protected virtual void OnApplicationQuit()"
  },
  "api/Lachee.Utilities.SortedGizmos.html": {
    "href": "api/Lachee.Utilities.SortedGizmos.html",
    "title": "Class SortedGizmos | Utilities",
    "keywords": "Class SortedGizmos Inheritance System.Object SortedGizmos Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Lachee.Utilities Assembly : cs.temp.dll.dll Syntax public static class SortedGizmos Fields correctColor Declaration public static bool correctColor Field Value Type Description System.Boolean Properties color Declaration public static Color color { get; set; } Property Value Type Description Color Methods BatchCommit() Declaration public static void BatchCommit() DrawCube(Vector3, Vector3) Declaration public static void DrawCube(Vector3 center, Vector3 size) Parameters Type Name Description Vector3 center Vector3 size DrawSphere(Vector3, Single) Declaration public static void DrawSphere(Vector3 center, float radius) Parameters Type Name Description Vector3 center System.Single radius DrawWireCube(Vector3, Vector3) Declaration public static void DrawWireCube(Vector3 center, Vector3 size) Parameters Type Name Description Vector3 center Vector3 size DrawWireSphere(Vector3, Single) Declaration public static void DrawWireSphere(Vector3 center, float radius) Parameters Type Name Description Vector3 center System.Single radius"
  },
  "api/Lachee.Utilities.SpriteExtensions.html": {
    "href": "api/Lachee.Utilities.SpriteExtensions.html",
    "title": "Class SpriteExtensions | Utilities",
    "keywords": "Class SpriteExtensions Extends sprites Inheritance System.Object SpriteExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Lachee.Utilities Assembly : cs.temp.dll.dll Syntax public static class SpriteExtensions Methods GetPixels(Sprite) Gets the pixel data of the specific sprite. This will get the pixels from the base texture that only applies to this specific sprite. If the sprite texture is not set to read-write it will throw. If the sprite is part of a tightly packed alias it will throw. Declaration public static Color[] GetPixels(this Sprite sprite) Parameters Type Name Description Sprite sprite Returns Type Description Color []"
  },
  "api/Lachee.Utilities.TransformExtension.html": {
    "href": "api/Lachee.Utilities.TransformExtension.html",
    "title": "Class TransformExtension | Utilities",
    "keywords": "Class TransformExtension Extends Transform Inheritance System.Object TransformExtension Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Lachee.Utilities Assembly : cs.temp.dll.dll Syntax public static class TransformExtension Methods RotateAround(Transform, Vector3, Quaternion) Rotates around a pivot with the given rotation Declaration public static void RotateAround(this Transform transform, Vector3 pivotPoint, Quaternion rotation) Parameters Type Name Description Transform transform Vector3 pivotPoint Quaternion rotation"
  },
  "api/Lachee.UYAML.ClassIdentifier.html": {
    "href": "api/Lachee.UYAML.ClassIdentifier.html",
    "title": "Enum ClassIdentifier | Utilities",
    "keywords": "Enum ClassIdentifier Namespace : Lachee.UYAML Assembly : cs.temp.dll.dll Syntax public enum ClassIdentifier Fields Name Description AimConstraint AnchoredJoint2D Animation AnimationClip Animator AnimatorController AnimatorOverrideController AnimatorState AnimatorStateMachine AnimatorStateTransition AnimatorTransition AnimatorTransitionBase AnnotationManager AreaEffector2D ArticulationBody AssemblyDefinitionAsset AssemblyDefinitionImporter AssemblyDefinitionReferenceAsset AssemblyDefinitionReferenceImporter AssetBundle AssetBundleManifest AssetDatabaseV1 AssetImporter AssetImporterLog AssetImportInProgressProxy AssetMetaData AudioBehaviour AudioBuildInfo AudioChorusFilter AudioClip AudioDistortionFilter AudioEchoFilter AudioFilter AudioHighPassFilter AudioImporter AudioListener AudioLowPassFilter AudioManager AudioMixer AudioMixerController AudioMixerEffectController AudioMixerGroup AudioMixerGroupController AudioMixerLiveUpdateBool AudioMixerLiveUpdateFloat AudioMixerSnapshot AudioMixerSnapshotController AudioReverbFilter AudioReverbZone AudioSource Avatar AvatarMask BaseAnimationTrack BaseVideoTexture Behaviour BillboardAsset BillboardRenderer BlendTree Bool BoxCollider BoxCollider2D BuildReport BuildSettings BuiltAssetBundleInfoSet BuoyancyEffector2D CachedSpriteAtlas CachedSpriteAtlasRuntimeData Camera Canvas CanvasGroup CanvasRenderer CapsuleCollider CapsuleCollider2D CGProgram CharacterController CharacterJoint CircleCollider2D Cloth ClusterInputManager Collider Collider2D Collision Collision2D Component CompositeCollider2D ComputeShader ComputeShaderImporter ConfigurableJoint ConstantForce ConstantForce2D Cubemap CubemapArray CustomRenderTexture DefaultAsset DefaultImporter DelayedCallManager Derived DistanceJoint2D EdgeCollider2D EditorBuildSettings EditorExtension EditorExtensionImpl EditorProjectAccess EditorSettings EditorUserBuildSettings EditorUserSettings Effector2D EmptyObject FakeComponent FBXImporter FixedJoint FixedJoint2D Flare FlareLayer Float Font FrictionJoint2D GameManager GameObject GameObjectRecorder GlobalGameManager GraphicsSettings Grid GridLayout Halo HaloLayer HierarchyState HingeJoint HingeJoint2D HumanTemplate IConstraint IHVImageFormatImporter InputManager InspectorExpandedState Int Joint Joint2D LensFlare LevelGameManager LibraryAssetImporter Light LightingDataAsset LightingDataAssetParent LightingSettings LightmapParameters LightmapSettings LightProbeGroup LightProbeProxyVolume LightProbes LineRenderer LocalizationAsset LocalizationImporter LODGroup LookAtConstraint LowerResBlitTexture Material Mesh Mesh3DSImporter MeshCollider MeshFilter MeshRenderer ModelImporter MonoBehaviour MonoImporter MonoManager MonoObject MonoScript Motion MultiArtifactTestImporter NamedObject NativeFormatImporter NativeObjectType NavMeshAgent NavMeshData NavMeshObstacle NavMeshProjectSettings NavMeshSettings NewAnimationTrack Object OcclusionArea OcclusionCullingData OcclusionCullingSettings OcclusionPortal OffMeshLink PackageManifest PackageManifestImporter PackedAssets ParentConstraint ParticleSystem ParticleSystemForceField ParticleSystemRenderer PhysicMaterial Physics2DSettings PhysicsManager PhysicsMaterial2D PhysicsUpdateBehaviour2D PlatformEffector2D PlatformModuleSetup PlayableDirector PlayerSettings PluginBuildInfo PluginImporter PointEffector2D Polygon2D PolygonCollider2D PositionConstraint Prefab PrefabImporter PrefabInstance PreloadData Preset PresetManager PreviewAnimationClip ProceduralMaterial ProceduralTexture Projector PropertyModificationsTargetTestObject QualitySettings RayTracingShader RayTracingShaderImporter RectTransform ReferencesArtifactGenerator ReflectionProbe RelativeJoint2D Renderer RendererFake RenderSettings RenderTexture ResourceManager Rigidbody Rigidbody2D RootMotionData RotationConstraint RuntimeAnimatorController RuntimeInitializeOnLoadManager SampleClip ScaleConstraint SceneAsset ScenesUsingAssets SceneVisibilityState ScriptableCamera ScriptedImporter ScriptMapper SerializableManagedHost SerializableManagedRefTestClass Shader ShaderImporter ShaderVariantCollection SiblingDerived SketchUpImporter SkinnedMeshRenderer Skybox SliderJoint2D SortingGroup SparseTexture SpeedTreeImporter SpeedTreeWindAsset SphereCollider SpringJoint SpringJoint2D Sprite SpriteAtlas SpriteAtlasAsset SpriteAtlasDatabase SpriteAtlasImporter SpriteMask SpriteRenderer SpriteShapeRenderer StreamingController StreamingManager SubDerived SubstanceArchive SubstanceImporter SurfaceEffector2D TagManager TargetJoint2D Terrain TerrainCollider TerrainData TerrainLayer TestObjectVectorPairStringBool TestObjectWithSerializedAnimationCurve TestObjectWithSerializedArray TestObjectWithSerializedMapStringBool TestObjectWithSerializedMapStringNonAlignedStruct TestObjectWithSpecialLayoutOne TestObjectWithSpecialLayoutTwo TextAsset TextMesh TextScriptImporter Texture Texture2D Texture2DArray Texture3D TextureImporter Tilemap TilemapCollider2D TilemapRenderer TimeManager TrailRenderer Transform Tree TrueTypeFontImporter UnityConnectSettings Vector3f VersionControlSettings VFXManager VFXRenderer VideoClip VideoClipImporter VideoPlayer VisualEffect VisualEffectAsset VisualEffectImporter VisualEffectObject VisualEffectResource VisualEffectSubgraph VisualEffectSubgraphBlock VisualEffectSubgraphOperator Void WebCamTexture WheelCollider WheelJoint2D WindZone WorldAnchor"
  },
  "api/Lachee.UYAML.html": {
    "href": "api/Lachee.UYAML.html",
    "title": "Namespace Lachee.UYAML | Utilities",
    "keywords": "Namespace Lachee.UYAML Classes ParseException Represents errors that occure during parsing Parser Simple Parser for Unity YAML files. Able to produce basic tree structures, it is suitable for raw manipulation of the data but not serialization. UArray Stores an array of values/objects UComponent A single asset/class UNode Basic data structure UObject Stores a map of names and properties UProperty Stores a key pair UValue Stores a single value Writer Interfaces IUPropertyCollection Enums ClassIdentifier"
  },
  "api/Lachee.UYAML.IUPropertyCollection.html": {
    "href": "api/Lachee.UYAML.IUPropertyCollection.html",
    "title": "Interface IUPropertyCollection | Utilities",
    "keywords": "Interface IUPropertyCollection Namespace : Lachee.UYAML Assembly : cs.temp.dll.dll Syntax public interface IUPropertyCollection Methods Add(UProperty) Declaration bool Add(UProperty property) Parameters Type Name Description UProperty property Returns Type Description System.Boolean"
  },
  "api/Lachee.UYAML.ParseException.html": {
    "href": "api/Lachee.UYAML.ParseException.html",
    "title": "Class ParseException | Utilities",
    "keywords": "Class ParseException Represents errors that occure during parsing Inheritance System.Object System.Exception ParseException Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception Inherited Members System.Exception.GetBaseException() System.Exception.ToString() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.Message System.Exception.Data System.Exception.InnerException System.Exception.TargetSite System.Exception.StackTrace System.Exception.HelpLink System.Exception.Source System.Exception.HResult System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() Namespace : Lachee.UYAML Assembly : cs.temp.dll.dll Syntax public sealed class ParseException : Exception, ISerializable, _Exception Constructors ParseException(String, Int32) Declaration public ParseException(string message, int position) Parameters Type Name Description System.String message System.Int32 position Properties Position Declaration public int Position { get; } Property Value Type Description System.Int32 Implements System.Runtime.Serialization.ISerializable System.Runtime.InteropServices._Exception"
  },
  "api/Lachee.UYAML.Parser.html": {
    "href": "api/Lachee.UYAML.Parser.html",
    "title": "Class Parser | Utilities",
    "keywords": "Class Parser Simple Parser for Unity YAML files. Able to produce basic tree structures, it is suitable for raw manipulation of the data but not serialization. Inheritance System.Object Parser Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Lachee.UYAML Assembly : cs.temp.dll.dll Syntax public sealed class Parser Methods Parse(String) Parses the given UYAML content Declaration public static List<UComponent> Parse(string content) Parameters Type Name Description System.String content Returns Type Description System.Collections.Generic.List < UComponent >"
  },
  "api/Lachee.UYAML.UArray.html": {
    "href": "api/Lachee.UYAML.UArray.html",
    "title": "Class UArray | Utilities",
    "keywords": "Class UArray Stores an array of values/objects Inheritance System.Object UNode UArray Implements IUPropertyCollection Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Lachee.UYAML Assembly : cs.temp.dll.dll Syntax public class UArray : UNode, IUPropertyCollection Fields items Declaration public List<UNode> items Field Value Type Description System.Collections.Generic.List < UNode > Properties Count Declaration public int Count { get; } Property Value Type Description System.Int32 Item[Int32] Declaration public UNode this[int i] { get; set; } Parameters Type Name Description System.Int32 i Property Value Type Description UNode Methods Add(UNode) Declaration public bool Add(UNode node) Parameters Type Name Description UNode node Returns Type Description System.Boolean Add(UProperty) Declaration public bool Add(UProperty property) Parameters Type Name Description UProperty property Returns Type Description System.Boolean Implements IUPropertyCollection"
  },
  "api/Lachee.UYAML.UComponent.html": {
    "href": "api/Lachee.UYAML.UComponent.html",
    "title": "Class UComponent | Utilities",
    "keywords": "Class UComponent A single asset/class Inheritance System.Object UNode UComponent Implements IUPropertyCollection Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Lachee.UYAML Assembly : cs.temp.dll.dll Syntax public sealed class UComponent : UNode, IUPropertyCollection Fields classID Declaration public ClassIdentifier classID Field Value Type Description ClassIdentifier fileID Declaration public long fileID Field Value Type Description System.Int64 Properties name Declaration public string name { get; } Property Value Type Description System.String root Declaration public UObject root { get; } Property Value Type Description UObject rootProperty Declaration public UProperty rootProperty { get; } Property Value Type Description UProperty Methods Add(UProperty) Declaration public bool Add(UProperty property) Parameters Type Name Description UProperty property Returns Type Description System.Boolean ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Implements IUPropertyCollection"
  },
  "api/Lachee.UYAML.UNode.html": {
    "href": "api/Lachee.UYAML.UNode.html",
    "title": "Class UNode | Utilities",
    "keywords": "Class UNode Basic data structure Inheritance System.Object UNode UArray UComponent UObject UValue Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Lachee.UYAML Assembly : cs.temp.dll.dll Syntax public class UNode"
  },
  "api/Lachee.UYAML.UObject.html": {
    "href": "api/Lachee.UYAML.UObject.html",
    "title": "Class UObject | Utilities",
    "keywords": "Class UObject Stores a map of names and properties Inheritance System.Object UNode UObject Implements IUPropertyCollection System.Collections.Generic.IDictionary < System.String , UNode > System.Collections.Generic.ICollection < System.Collections.Generic.KeyValuePair < System.String , UNode >> System.Collections.Generic.IEnumerable < System.Collections.Generic.KeyValuePair < System.String , UNode >> System.Collections.IEnumerable Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Lachee.UYAML Assembly : cs.temp.dll.dll Syntax public class UObject : UNode, IUPropertyCollection, IDictionary<string, UNode>, ICollection<KeyValuePair<string, UNode>>, IEnumerable<KeyValuePair<string, UNode>>, IEnumerable Fields properties Declaration public Dictionary<string, UProperty> properties Field Value Type Description System.Collections.Generic.Dictionary < System.String , UProperty > Properties Count Declaration public int Count { get; } Property Value Type Description System.Int32 IsReadOnly Declaration public bool IsReadOnly { get; } Property Value Type Description System.Boolean Item[String] Declaration public UNode this[string name] { get; set; } Parameters Type Name Description System.String name Property Value Type Description UNode Keys Declaration public ICollection<string> Keys { get; } Property Value Type Description System.Collections.Generic.ICollection < System.String > Values Declaration public ICollection<UNode> Values { get; } Property Value Type Description System.Collections.Generic.ICollection < UNode > Methods Add(UProperty) Declaration public bool Add(UProperty property) Parameters Type Name Description UProperty property Returns Type Description System.Boolean Add(KeyValuePair<String, UNode>) Declaration public void Add(KeyValuePair<string, UNode> item) Parameters Type Name Description System.Collections.Generic.KeyValuePair < System.String , UNode > item Add(String, UNode) Declaration public void Add(string key, UNode value) Parameters Type Name Description System.String key UNode value Clear() Declaration public void Clear() Contains(KeyValuePair<String, UNode>) Declaration public bool Contains(KeyValuePair<string, UNode> item) Parameters Type Name Description System.Collections.Generic.KeyValuePair < System.String , UNode > item Returns Type Description System.Boolean ContainsKey(String) Declaration public bool ContainsKey(string key) Parameters Type Name Description System.String key Returns Type Description System.Boolean CopyTo(KeyValuePair<String, UNode>[], Int32) Declaration public void CopyTo(KeyValuePair<string, UNode>[] array, int arrayIndex) Parameters Type Name Description System.Collections.Generic.KeyValuePair < System.String , UNode >[] array System.Int32 arrayIndex GetEnumerator() Declaration public IEnumerator<KeyValuePair<string, UNode>> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < System.Collections.Generic.KeyValuePair < System.String , UNode >> Remove(KeyValuePair<String, UNode>) Declaration public bool Remove(KeyValuePair<string, UNode> item) Parameters Type Name Description System.Collections.Generic.KeyValuePair < System.String , UNode > item Returns Type Description System.Boolean Remove(String) Declaration public bool Remove(string key) Parameters Type Name Description System.String key Returns Type Description System.Boolean TryGetValue(String, out UNode) Declaration public bool TryGetValue(string key, out UNode value) Parameters Type Name Description System.String key UNode value Returns Type Description System.Boolean Explicit Interface Implementations IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements IUPropertyCollection System.Collections.Generic.IDictionary<TKey, TValue> System.Collections.Generic.ICollection<T> System.Collections.Generic.IEnumerable<T> System.Collections.IEnumerable"
  },
  "api/Lachee.UYAML.UProperty.html": {
    "href": "api/Lachee.UYAML.UProperty.html",
    "title": "Class UProperty | Utilities",
    "keywords": "Class UProperty Stores a key pair Inheritance System.Object UProperty Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Lachee.UYAML Assembly : cs.temp.dll.dll Syntax public class UProperty Constructors UProperty(String, UNode) Declaration public UProperty(string name, UNode value) Parameters Type Name Description System.String name UNode value Fields name Declaration public string name Field Value Type Description System.String value Declaration public UNode value Field Value Type Description UNode"
  },
  "api/Lachee.UYAML.UValue.html": {
    "href": "api/Lachee.UYAML.UValue.html",
    "title": "Class UValue | Utilities",
    "keywords": "Class UValue Stores a single value Inheritance System.Object UNode UValue Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Lachee.UYAML Assembly : cs.temp.dll.dll Syntax public class UValue : UNode Constructors UValue() Declaration public UValue() UValue(String) Declaration public UValue(string value) Parameters Type Name Description System.String value Fields value Declaration public string value Field Value Type Description System.String Methods ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "api/Lachee.UYAML.Writer.html": {
    "href": "api/Lachee.UYAML.Writer.html",
    "title": "Class Writer | Utilities",
    "keywords": "Class Writer Inheritance System.Object Writer Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Lachee.UYAML Assembly : cs.temp.dll.dll Syntax public class Writer Fields MaxInlineValues Declaration public int MaxInlineValues Field Value Type Description System.Int32 Properties IncludeHeader Declaration public bool IncludeHeader { get; set; } Property Value Type Description System.Boolean IndentationSpaces Declaration public int IndentationSpaces { get; set; } Property Value Type Description System.Int32 InlineArrays Declaration public bool InlineArrays { get; set; } Property Value Type Description System.Boolean InlineComplexArrays Declaration public bool InlineComplexArrays { get; set; } Property Value Type Description System.Boolean InlineComplexObjects Declaration public bool InlineComplexObjects { get; set; } Property Value Type Description System.Boolean InlineObjects Declaration public bool InlineObjects { get; set; } Property Value Type Description System.Boolean Methods AddComponent(UComponent) Declaration public void AddComponent(UComponent component) Parameters Type Name Description UComponent component AddComponets(IEnumerable<UComponent>) Declaration public void AddComponets(IEnumerable<UComponent> components) Parameters Type Name Description System.Collections.Generic.IEnumerable < UComponent > components Build(IEnumerable<UComponent>) Builds a UYAML document with the default settings Declaration public static string Build(IEnumerable<UComponent> components) Parameters Type Name Description System.Collections.Generic.IEnumerable < UComponent > components Returns Type Description System.String ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString()"
  },
  "index.html": {
    "href": "index.html",
    "title": "Lachee's Utilities | Utilities",
    "keywords": "Lachee's Utilities This package contains a collection of useful classes and tools that I have personally used throughout my games. Originating from Party Crashers, I have been slowly building and involving this kit, and now with Unity Package Manager being \"somewhat\" stable, I decided to make a github repository so I can better track the changes and synchronise the numerous versions I have. Since it is just a \"collection of scripts\", there isn't much in the ways of a manual or a theme for the package other than \"hey thats useful\". Since it is all under MIT, you are free to simply extract just the scripts you need, there is no dependencies amongst the files unless explicitly stated in the top of the file (ie: some of the custom editors). Usage Since this is just a folder of scripts, you can use it how you need it. Check out the documentation for more information. https://lachee.github.io/unity-utilities/ Installation OpenUPM The openupm registry is a open source package manager for Unity and provides the openupm-cli to manage your dependencies. openupm add com.lachee.unity-utilities Manual UPM Use the Unity Package Manager to add a git package. Adding the git to your UPM will limit updates as Unity will not track versioning on git projects (even though they totally could with tags). Open the Unity Package Manager and Add Package by git URL... https://github.com/Lachee/unity-utilities.git For local editable versions, manually clone the repo into your package folder. Note the exact spelling on destination name. git clone https://github.com/Lachee/unity-utilities.git Packages/com.lachee.utilities Unity Package Go old school and download the Unity Package and import it into your project. Download the .unitypackage from the Releases or via the last run Create Release action. Import that package into your Unity3D TODO List of things I wish to implement: More Surrogates for Binary Formatter My PlayerPrefs from Cross-Platform as it supports Serialization / Deserialization Fix to my Automatic Namespacer with better support for rules I should rewrite this Configuration panel for stuff? Probably not required Implement https://forum.unity.com/threads/detecting-textmesh-pro.755501/ so i can add Input features Asset Bin: Allows you to quickly grab and store assets for building stuff Right Click - Jump to Definition"
  }
}